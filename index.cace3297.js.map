{"mappings":"A,S,E,C,E,O,G,E,U,C,E,O,C,C,C,II6BY,E,E,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,W,C,I,I,E,I,A,G,E,E,W,C,E,a,C,C,GH3BZ,IAgBA,EAhBI,EAAU,IAAI,IAgBlB,EAfA,SAAkB,CAAO,CAAE,CAAQ,EACjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAC5C,EAAQ,GAAG,CAAC,CAAQ,CAAC,EAAE,CAAE,CACvB,QAAS,EACT,KAAM,CAAQ,CAAC,EAAI,EAAE,AACvB,EAEJ,C,GCVA,AAAA,EAAA,SAAA,QAAA,CAA8C,IAAA,IAAoB,GAAA,YAAA,GAAA,EAAI,QAAQ,GAAG,KAAK,KAAK,CAAC,kJGIrF,OAAM,EAIX,WAAkB,MAAO,CACvB,OAAO,IAAI,EAAO,EAAG,EACvB,CAKA,WAAkB,KAAM,CACtB,OAAO,IAAI,EAAO,EAAG,EACvB,CAKA,WAAkB,MAAO,CACvB,OAAO,IAAI,EAAO,GAAK,GACzB,CAKA,WAAkB,IAAK,CACrB,OAAO,IAAI,EAAO,EAAG,GACvB,CAKA,WAAkB,MAAO,CACvB,OAAO,IAAI,EAAO,EAAG,EACvB,CAKA,WAAkB,MAAO,CACvB,OAAO,IAAI,EAAO,GAAI,EACxB,CAIA,WAAkB,OAAQ,CACxB,OAAO,IAAI,EAAO,EAAG,EACvB,CAMA,OAAc,UAAU,CAAa,CAAE,CACrC,OAAO,IAAI,EAAO,KAAK,GAAG,CAAC,GAAQ,KAAK,GAAG,CAAC,GAC9C,CAKA,OAAc,QAAQ,CAAW,CAAE,eAC7B,GAGA,MAAM,EAAI,CAAC,GAAK,MAAM,EAAI,CAAC,IAI3B,EAAI,CAAC,GAAK,KAAY,EAAI,CAAC,GAAK,KAAY,EAAI,CAAC,GAAK,CAAC,KAAY,EAAI,CAAC,GAAK,CAAC,GAKpF,CAOA,OAAc,SAAS,CAAY,CAAE,CAAY,CAAE,CACjD,OAAO,KAAK,IAAI,CAAC,KAAK,GAAG,CAAC,EAAK,CAAC,CAAG,EAAK,CAAC,CAAE,GAAK,KAAK,GAAG,CAAC,EAAK,CAAC,CAAG,EAAK,CAAC,CAAE,GAC5E,CAEA,OAAc,IAAI,CAAY,CAAE,CAAY,CAAE,CAC5C,OAAO,IAAI,EAAO,KAAK,GAAG,CAAC,EAAK,CAAC,CAAE,EAAK,CAAC,EAAG,KAAK,GAAG,CAAC,EAAK,CAAC,CAAE,EAAK,CAAC,EACrE,CAEA,OAAc,IAAI,CAAY,CAAE,CAAY,CAAE,CAC5C,OAAO,IAAI,EAAO,KAAK,GAAG,CAAC,EAAK,CAAC,CAAE,EAAK,CAAC,EAAG,KAAK,GAAG,CAAC,EAAK,CAAC,CAAE,EAAK,CAAC,EACrE,CAMA,YAAY,CAAS,CAAE,CAAS,CAAE,CAKxB,IAAA,CAAA,EAAA,CAAK,EAgBL,IAAA,CAAA,EAAA,CAAK,EApBb,IAAI,CAAC,EAAE,CAAG,EACV,IAAI,CAAC,EAAE,CAAG,CACZ,CAMA,IAAW,GAAY,CACrB,OAAO,IAAI,CAAC,EAAE,AAChB,CAMA,IAAW,EAAE,CAAW,CAAE,CACxB,IAAI,CAAC,EAAE,CAAG,CACZ,CAMA,IAAW,GAAY,CACrB,OAAO,IAAI,CAAC,EAAE,AAChB,CAMA,IAAW,EAAE,CAAW,CAAE,CACxB,IAAI,CAAC,EAAE,CAAG,CACZ,CAMA,MAAM,CAAS,CAAE,CAAS,CAAE,CACzB,IAAI,CAAC,CAAC,CAAc,EACpB,IAAI,CAAC,CAAC,CAAc,CACvB,CAOO,OAAO,CAAc,CAAE,EAAoB,IAAK,CAAW,CAChE,OAAO,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,CAAG,EAAO,CAAC,GAAK,GAAa,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,CAAG,EAAO,CAAC,GAAK,CACpF,CAMA,SAAgB,CAAU,CAAU,CAClC,GAAI,CAAC,EACH,OAAO,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,CAAG,IAAI,CAAC,CAAC,CAAG,IAAI,CAAC,CAAC,CAAG,IAAI,CAAC,CAAC,EAEpD,IAAM,EAAS,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CACrB,EAAS,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CAC3B,OAAO,KAAK,IAAI,CAAC,EAAS,EAAS,EAAS,EAC9C,CAEO,eAAe,CAAU,CAAU,CACnC,GACH,CAAA,EAAI,EAAO,IAAI,AAAJ,EAEb,IAAM,EAAS,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CACrB,EAAS,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CAC3B,OAAO,EAAS,EAAS,EAAS,CACpC,CAKA,IAAW,MAAe,CACxB,OAAO,IAAI,CAAC,QAAQ,EACtB,CAMA,IAAW,KAAK,CAAiB,CAAE,CACjC,IAAM,EAAI,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,GACjC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAE,EAAE,CAAC,CACrB,CAKO,WAAoB,CACzB,IAAM,EAAI,IAAI,CAAC,QAAQ,UACvB,AAAI,EAAI,EACC,IAAI,EAAO,IAAI,CAAC,CAAC,CAAG,EAAG,IAAI,CAAC,CAAC,CAAG,GAEhC,IAAI,EAAO,EAAG,EAEzB,CAKA,QAAe,CAAW,CAAU,CAClC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAK,KAAK,CAAC,GAC7B,CASO,MAAM,CAA4B,CAAE,CAAa,CAAU,CAChE,IAAM,EAAS,GAAQ,IAAI,EAAO,EAAG,GAQrC,OAPI,aAAuB,GACzB,EAAO,CAAC,CAAG,IAAI,CAAC,CAAC,CAAG,EAAY,CAAC,CACjC,EAAO,CAAC,CAAG,IAAI,CAAC,CAAC,CAAG,EAAY,CAAC,GAEjC,EAAO,CAAC,CAAG,IAAI,CAAC,CAAC,CAAG,EACpB,EAAO,CAAC,CAAG,IAAI,CAAC,CAAC,CAAG,GAEf,CACT,CAOO,IAAI,CAAS,CAAE,CAAa,CAAU,QAC3C,AAAI,GACF,EAAK,CAAC,CAAG,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CACrB,EAAK,CAAC,CAAG,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CACd,GAEF,IAAI,EAAO,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CAAE,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CAC9C,CAMA,IAAW,CAAS,CAAU,CAC5B,OAAO,IAAI,EAAO,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CAAE,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CAC9C,CAOA,SAAgB,CAAS,CAAU,CAEjC,OADA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CAAE,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,EAC9B,IAAI,AACb,CAOA,SAAgB,CAAS,CAAU,CAEjC,OADA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CAAE,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,EAC9B,IAAI,AACb,CAMA,WAAkB,CAAY,CAAU,CAEtC,OADA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAG,EAAM,IAAI,CAAC,CAAC,CAAG,GAC5B,IAAI,AACb,CAMA,IAAW,CAAS,CAAU,CAC5B,OAAO,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CAAG,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,AACpC,CAYO,MAAM,CAAM,CAAO,QACxB,AAAI,aAAa,EACR,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CAAG,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC,CACzB,AAAa,UAAb,OAAO,EACT,IAAI,EAAO,EAAI,IAAI,CAAC,CAAC,CAAE,CAAC,EAAI,IAAI,CAAC,CAAC,QAE7C,CAEA,OAAO,MAAM,CAAW,CAAE,CAAW,CAAU,CAC7C,OAAO,IAAI,EAAO,CAAC,EAAM,EAAI,CAAC,CAAE,EAAM,EAAI,CAAC,CAC7C,CAKO,eAAwB,CAC7B,OAAO,IAAI,EAAO,IAAI,CAAC,CAAC,CAAE,CAAC,IAAI,CAAC,CAAC,CACnC,CAKO,QAAiB,CACtB,OAAO,IAAI,CAAC,aAAa,GAAG,SAAS,EACvC,CAKO,QAAiB,CACtB,OAAO,IAAI,CAAC,KAAK,CAAC,GACpB,CAKO,SAAkB,CACvB,OAAO,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC,CAAE,IAAI,CAAC,CAAC,CAClC,CAMO,OAAO,CAAa,CAAE,CAAe,CAAU,CAC/C,GACH,CAAA,EAAS,IAAI,EAAO,EAAG,EADzB,EAGA,IAAM,EAAW,KAAK,GAAG,CAAC,GACpB,EAAW,KAAK,GAAG,CAAC,GAG1B,OAAO,IAAI,EAFD,EAAY,CAAA,IAAI,CAAC,CAAC,CAAG,EAAO,CAAA,AAAA,EAAK,EAAY,CAAA,IAAI,CAAC,CAAC,CAAG,EAAO,CAAA,AAAA,EAAK,EAAO,CAAC,CAC1E,EAAY,CAAA,IAAI,CAAC,CAAC,CAAG,EAAO,CAAA,AAAA,EAAK,EAAY,CAAA,IAAI,CAAC,CAAC,CAAG,EAAO,CAAA,AAAA,EAAK,EAAO,CAAC,CAEtF,CAKA,MAAa,CAAa,CAAU,CAClC,IAAM,EAAI,GAAQ,IAAI,EAAO,EAAG,GAGhC,OAFA,EAAE,CAAC,CAAG,IAAI,CAAC,CAAC,CACZ,EAAE,CAAC,CAAG,IAAI,CAAC,CAAC,CACL,CACT,CAKA,SAAgB,CAAc,CAAU,QACtC,AAAI,EACK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,GAAO,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,GAAO,CAAC,CAAC,CAExD,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,AACjC,CACF,CAQO,SAAS,EAAI,CAAS,CAAE,CAAS,EACtC,OAAO,IAAI,EAAO,EAAG,EACvB,CD9XA,MAAM,EAAQ,AAAU,EAAV,KAAK,EAAE,CAoBd,SAAS,EAAK,CAAW,SAC5B,AAAI,AAAQ,IAAR,EACO,EAEJ,EAAM,EAAI,GAAK,CAC1B,C,CAEY,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,E,C,E,C,C,G,C,I,C,C,E,C,C,G,C,GAUL,OAAM,EAwBT,OAAc,MAAM,CAAY,CAAE,CAAa,CAAE,CAAc,CAAE,CAAW,CAAE,CAAY,CAAE,CAAW,CAAU,CAC7G,IAAM,EAAM,IAAI,EAoBhB,OAnBA,EAAI,IAAI,CAAC,EAAE,CAAG,EAAK,CAAA,EAAQ,CAAA,EAC3B,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,EAAE,CAAG,EAEd,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,EAAE,CAAG,EAAK,CAAA,EAAM,CAAA,EACzB,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,EAAE,CAAG,EAEd,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,GAAG,CAAG,GAAM,CAAA,EAAM,CAAA,EAC3B,EAAI,IAAI,CAAC,GAAG,CAAG,EAEf,EAAI,IAAI,CAAC,GAAG,CAAG,CAAE,CAAA,EAAQ,CAAA,EAAS,CAAA,EAAQ,CAAA,EAC1C,EAAI,IAAI,CAAC,GAAG,CAAG,CAAE,CAAA,EAAM,CAAA,EAAW,CAAA,EAAM,CAAA,EACxC,EAAI,IAAI,CAAC,GAAG,CAAG,CAAE,CAAA,EAAM,CAAA,EAAS,CAAA,EAAM,CAAA,EACtC,EAAI,IAAI,CAAC,GAAG,CAAG,EACR,CACX,CAKA,MAAa,CAAa,CAAU,CAChC,IAAM,EAAM,GAAQ,IAAI,EAoBxB,OAnBA,EAAI,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAC1B,EAAI,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAC1B,EAAI,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAC1B,EAAI,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAE1B,EAAI,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAC1B,EAAI,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAC1B,EAAI,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAC1B,EAAI,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAE1B,EAAI,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAC1B,EAAI,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAC1B,EAAI,IAAI,CAAC,GAAG,CAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAC5B,EAAI,IAAI,CAAC,GAAG,CAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAE5B,EAAI,IAAI,CAAC,GAAG,CAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAC5B,EAAI,IAAI,CAAC,GAAG,CAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAC5B,EAAI,IAAI,CAAC,GAAG,CAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAC5B,EAAI,IAAI,CAAC,GAAG,CAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CACrB,CACX,CAQO,aAAyB,CAC5B,OAAO,IAAI,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,CACvC,CAEA,OAAc,iBAAiB,CAAkB,CAAE,CAC/C,IAAM,EAAS,IAAI,EAEnB,OADA,EAAO,IAAI,CAAG,EACP,CACX,CAKA,OAAc,UAAmB,CAC7B,IAAM,EAAM,IAAI,EAoBhB,OAnBA,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,EAAE,CAAG,EAEd,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,EAAE,CAAG,EAEd,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,GAAG,CAAG,EACf,EAAI,IAAI,CAAC,GAAG,CAAG,EAEf,EAAI,IAAI,CAAC,GAAG,CAAG,EACf,EAAI,IAAI,CAAC,GAAG,CAAG,EACf,EAAI,IAAI,CAAC,GAAG,CAAG,EACf,EAAI,IAAI,CAAC,GAAG,CAAG,EACR,CACX,CAMO,OAAgB,CAqBnB,OAnBA,AADY,IAAI,CACZ,IAAI,CAAC,EAAE,CAAG,EACd,AAFY,IAAI,CAEZ,IAAI,CAAC,EAAE,CAAG,EACd,AAHY,IAAI,CAGZ,IAAI,CAAC,EAAE,CAAG,EACd,AAJY,IAAI,CAIZ,IAAI,CAAC,EAAE,CAAG,EAEd,AANY,IAAI,CAMZ,IAAI,CAAC,EAAE,CAAG,EACd,AAPY,IAAI,CAOZ,IAAI,CAAC,EAAE,CAAG,EACd,AARY,IAAI,CAQZ,IAAI,CAAC,EAAE,CAAG,EACd,AATY,IAAI,CASZ,IAAI,CAAC,EAAE,CAAG,EAEd,AAXY,IAAI,CAWZ,IAAI,CAAC,EAAE,CAAG,EACd,AAZY,IAAI,CAYZ,IAAI,CAAC,EAAE,CAAG,EACd,AAbY,IAAI,CAaZ,IAAI,CAAC,GAAG,CAAG,EACf,AAdY,IAAI,CAcZ,IAAI,CAAC,GAAG,CAAG,EAEf,AAhBY,IAAI,CAgBZ,IAAI,CAAC,GAAG,CAAG,EACf,AAjBY,IAAI,CAiBZ,IAAI,CAAC,GAAG,CAAG,EACf,AAlBY,IAAI,CAkBZ,IAAI,CAAC,GAAG,CAAG,EACf,AAnBY,IAAI,CAmBZ,IAAI,CAAC,GAAG,CAAG,EAnBH,IAAI,AAqBpB,CAOA,OAAc,YAAY,CAAS,CAAE,CAAS,CAAU,CACpD,IAAM,EAAM,EAAO,QAAQ,GAG3B,OAFA,EAAI,IAAI,CAAC,GAAG,CAAG,EACf,EAAI,IAAI,CAAC,GAAG,CAAG,EACR,CACX,CAOA,OAAc,MAAM,CAAU,CAAE,CAAU,CAAU,CAChD,IAAM,EAAM,EAAO,QAAQ,GAK3B,OAJA,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,EAAE,CAAG,EACd,EAAI,IAAI,CAAC,GAAG,CAAG,EACf,EAAI,IAAI,CAAC,GAAG,CAAG,EACR,CACX,CAMA,OAAc,SAAS,CAAoB,CAAU,CACjD,IAAM,EAAM,EAAO,QAAQ,GAK3B,OAJA,EAAI,IAAI,CAAC,EAAE,CAAG,KAAK,GAAG,CAAC,GACvB,EAAI,IAAI,CAAC,EAAE,CAAG,CAAC,KAAK,GAAG,CAAC,GACxB,EAAI,IAAI,CAAC,EAAE,CAAG,KAAK,GAAG,CAAC,GACvB,EAAI,IAAI,CAAC,EAAE,CAAG,KAAK,GAAG,CAAC,GAChB,CACX,CAcA,SAAS,CAA+B,CAAE,CAAsB,CAAmB,CAC/E,GAAI,aAA0B,EAAQ,CAClC,IAAM,EAAS,GAAoB,IAAI,EAAO,EAAG,GAG3C,EAAU,AAFD,EAEQ,CAAC,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,AAF3B,EAEkC,CAAC,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAC3E,EAAU,AAHD,EAGQ,CAAC,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,AAH3B,EAGkC,CAAC,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAIjF,OAFA,EAAO,CAAC,CAAG,EACX,EAAO,CAAC,CAAG,EACJ,CACX,CAAO,CACH,IAAM,EAAU,GAAmB,IAAI,EAEjC,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAElB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAElB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CACnB,EAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAEnB,EAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CACnB,EAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CACnB,EAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CACnB,EAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAEnB,EAAM,AArBE,EAqBI,IAAI,CAAC,EAAE,CACnB,EAAM,AAtBE,EAsBI,IAAI,CAAC,EAAE,CACnB,EAAM,AAvBE,EAuBI,IAAI,CAAC,EAAE,CACnB,EAAM,AAxBE,EAwBI,IAAI,CAAC,EAAE,CAEnB,EAAM,AA1BE,EA0BI,IAAI,CAAC,EAAE,CACnB,EAAM,AA3BE,EA2BI,IAAI,CAAC,EAAE,CACnB,EAAM,AA5BE,EA4BI,IAAI,CAAC,EAAE,CACnB,EAAM,AA7BE,EA6BI,IAAI,CAAC,EAAE,CAEnB,EAAM,AA/BE,EA+BI,IAAI,CAAC,EAAE,CACnB,EAAM,AAhCE,EAgCI,IAAI,CAAC,EAAE,CACnB,EAAM,AAjCE,EAiCI,IAAI,CAAC,GAAG,CACpB,EAAM,AAlCE,EAkCI,IAAI,CAAC,GAAG,CAEpB,EAAM,AApCE,EAoCI,IAAI,CAAC,GAAG,CACpB,EAAM,AArCE,EAqCI,IAAI,CAAC,GAAG,CACpB,EAAM,AAtCE,EAsCI,IAAI,CAAC,GAAG,CACpB,EAAM,AAvCE,EAuCI,IAAI,CAAC,GAAG,AAE1B,CAAA,EAAO,IAAI,CAAC,EAAE,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC3D,EAAO,IAAI,CAAC,EAAE,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC3D,EAAO,IAAI,CAAC,EAAE,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC3D,EAAO,IAAI,CAAC,EAAE,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAE3D,EAAO,IAAI,CAAC,EAAE,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC3D,EAAO,IAAI,CAAC,EAAE,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC3D,EAAO,IAAI,CAAC,EAAE,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC3D,EAAO,IAAI,CAAC,EAAE,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAE3D,EAAO,IAAI,CAAC,EAAE,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC3D,EAAO,IAAI,CAAC,EAAE,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC3D,EAAO,IAAI,CAAC,GAAG,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC5D,EAAO,IAAI,CAAC,GAAG,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAE5D,EAAO,IAAI,CAAC,GAAG,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC5D,EAAO,IAAI,CAAC,GAAG,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC5D,EAAO,IAAI,CAAC,GAAG,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAC5D,EAAO,IAAI,CAAC,GAAG,CAAG,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAAM,EAE5D,IAAM,EAAI,IAAI,CAAC,QAAQ,GAIvB,OAHA,EAAO,WAAW,CAAG,EAAK,EAAE,CAAC,EAAI,EAAK,EAAO,WAAW,EACxD,EAAO,WAAW,CAAG,EAAK,EAAE,CAAC,EAAI,EAAK,EAAO,WAAW,EAEjD,CACX,CACJ,CAQA,UAAU,CAAS,CAAE,CAAS,CAAE,CAC5B,IAAM,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAElB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAElB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CACnB,EAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAEnB,EAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CACnB,EAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CACnB,EAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CACnB,EAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAUzB,OALA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,EAAM,EAAI,EAAM,EAAI,AAF1B,EAE0B,EAAU,AADpC,EACoC,EAC9C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,EAAM,EAAI,EAAM,EAAI,AAH1B,EAG0B,EAAU,AAFpC,EAEoC,EAC9C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,EAAM,EAAI,EAAM,EAAI,AAJ1B,EAI0B,EAAU,AAHpC,EAGoC,EAC9C,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,EAAM,EAAI,EAAM,EAAI,AAL1B,EAK0B,EAAU,AAJpC,EAIoC,EAEvC,IAAI,AACf,CAEO,YAAY,CAAS,CAAE,CAAS,CAAE,CACrC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,EAChB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAG,CACpB,CAEO,aAAsB,CACzB,OAAO,AAAA,EAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAC3C,CAMA,OAAO,CAAa,CAAE,CAClB,IAAM,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAElB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAElB,EAAO,KAAK,GAAG,CAAC,GAChB,EAAS,KAAK,GAAG,CAAC,GAYxB,OAVA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAS,EAAM,EAAO,EACrC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAS,EAAM,EAAO,EACrC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAS,EAAM,EAAO,EACrC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAS,EAAM,EAAO,EAErC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAS,EAAM,EAAO,EACrC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAS,EAAM,EAAO,EACrC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAS,EAAM,EAAO,EACrC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAS,EAAM,EAAO,EAE9B,IAAI,AACf,CAOA,MAAM,CAAS,CAAE,CAAS,CAAE,CACxB,IAAM,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAElB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAClB,EAAM,IAAI,CAAC,IAAI,CAAC,EAAE,CAYxB,OAVA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAM,EACrB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAM,EACrB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAM,EACrB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAM,EAErB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAM,EACrB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAM,EACrB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAM,EACrB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAM,EAEd,IAAI,AACf,CAEO,YAAY,CAAa,CAAE,CAC9B,IAAM,EAAe,IAAI,CAAC,QAAQ,GAC5B,EAAO,KAAK,GAAG,CAAC,GAChB,EAAS,KAAK,GAAG,CAAC,EAExB,CAAA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAS,EAAa,CAAC,CACtC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAO,EAAa,CAAC,CACpC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,CAAC,EAAO,EAAa,CAAC,CACrC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAS,EAAa,CAAC,AAC1C,CAEO,aAAsB,CAEzB,OAAO,AAhbR,SAA2B,CAAa,EAC3C,IAAI,EAAW,EACf,GAAI,EAAQ,EACV,KAAO,EAAW,GAChB,GAAY,EAIhB,GAAI,EAAQ,EACV,KAAO,EAAW,GAChB,GAAY,EAGhB,OAAO,CACT,EAiaoB,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,SAAS,GAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,SAAS,IAE3F,CAEO,WAAoB,CAEvB,IAAM,EAAS,AAAA,EAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CACnD,OAAO,IAAI,CAAC,WAAW,CAAG,CAC9B,CAEO,WAAoB,CAEvB,IAAM,EAAS,AAAA,EAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CACnD,OAAO,IAAI,CAAC,WAAW,CAAG,CAC9B,CAKO,UAAmB,CACtB,OAAO,AAAA,EAAI,IAAI,CAAC,SAAS,GAAI,IAAI,CAAC,SAAS,GAC/C,CAIO,UAAU,CAAW,CAAE,CAC1B,GAAI,IAAI,CAAC,OAAO,GAAK,EACjB,MAGJ,CAAA,IAAI,CAAC,WAAW,CAAG,EAAK,GAExB,IAAM,EAAS,AAAA,EAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,WAAW,EAAE,SAAS,EAC9F,CAAA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAO,CAAC,CAAG,EAC1B,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAO,CAAC,CAAG,EAC1B,IAAI,CAAC,OAAO,CAAG,CACnB,CAIO,UAAU,CAAW,CAAE,CAC1B,GAAI,IAAI,CAAC,OAAO,GAAK,EACjB,MAEJ,CAAA,IAAI,CAAC,WAAW,CAAG,EAAK,GAExB,IAAM,EAAS,AAAA,EAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,WAAW,EAAE,SAAS,EAC9F,CAAA,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAO,CAAC,CAAG,EAC1B,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,EAAO,CAAC,CAAG,EAC1B,IAAI,CAAC,OAAO,CAAG,CACnB,CAEO,SAAS,CAAa,CAAE,CAC3B,IAAI,CAAC,SAAS,CAAC,EAAM,CAAC,EACtB,IAAI,CAAC,SAAS,CAAC,EAAM,CAAC,CAC1B,CAKO,qBAAsB,CACzB,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAG,IAAI,CAAC,IAAI,CAAC,EAAE,AACpE,CAQA,iBAAwB,CAAe,CAAU,CAO7C,IAAM,EAAa,EADP,IAAI,CAAC,mBAAmB,GAE9B,EAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAChB,EAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAChB,EAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAChB,EAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAEhB,EAAI,GAAU,EAAO,QAAQ,EAEnC,CAAA,EAAE,IAAI,CAAC,EAAE,CAAG,EAAI,EAChB,EAAE,IAAI,CAAC,EAAE,CAAG,CAAC,EAAI,EACjB,EAAE,IAAI,CAAC,EAAE,CAAG,CAAC,EAAI,EACjB,EAAE,IAAI,CAAC,EAAE,CAAG,EAAI,EAEhB,IAAM,EAAK,IAAI,CAAC,IAAI,CAAC,GAAG,CAClB,EAAK,IAAI,CAAC,IAAI,CAAC,GAAG,CAMxB,OAHA,EAAE,IAAI,CAAC,GAAG,CAAG,CAAE,CAAA,EAAK,EAAE,IAAI,CAAC,EAAE,CAAG,EAAK,EAAE,IAAI,CAAC,EAAE,AAAF,EAC5C,EAAE,IAAI,CAAC,GAAG,CAAG,CAAE,CAAA,EAAK,EAAE,IAAI,CAAC,EAAE,CAAG,EAAK,EAAE,IAAI,CAAC,EAAE,AAAF,EAErC,CACX,CAEO,YAAsB,CACzB,OACI,AAAiB,IAAjB,IAAI,CAAC,IAAI,CAAC,EAAE,EACZ,AAAiB,IAAjB,IAAI,CAAC,IAAI,CAAC,EAAE,EACZ,AAAiB,IAAjB,IAAI,CAAC,IAAI,CAAC,EAAE,EACZ,AAAiB,IAAjB,IAAI,CAAC,IAAI,CAAC,EAAE,EACZ,AAAiB,IAAjB,IAAI,CAAC,IAAI,CAAC,EAAE,EACZ,AAAiB,IAAjB,IAAI,CAAC,IAAI,CAAC,EAAE,EACZ,AAAiB,IAAjB,IAAI,CAAC,IAAI,CAAC,EAAE,EACZ,AAAiB,IAAjB,IAAI,CAAC,IAAI,CAAC,EAAE,EACZ,AAAiB,IAAjB,IAAI,CAAC,IAAI,CAAC,EAAE,EACZ,AAAiB,IAAjB,IAAI,CAAC,IAAI,CAAC,EAAE,EACZ,AAAkB,IAAlB,IAAI,CAAC,IAAI,CAAC,GAAG,EACb,AAAkB,IAAlB,IAAI,CAAC,IAAI,CAAC,GAAG,EACb,AAAkB,IAAlB,IAAI,CAAC,IAAI,CAAC,GAAG,EACb,AAAkB,IAAlB,IAAI,CAAC,IAAI,CAAC,GAAG,EACb,AAAkB,IAAlB,IAAI,CAAC,IAAI,CAAC,GAAG,EACb,AAAkB,IAAlB,IAAI,CAAC,IAAI,CAAC,GAAG,AAErB,CAEO,UAAW,CACd,MAAO,CAAC;CACf,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;CAChE,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;CAChE,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;CACjE,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;AAClE,CAAC,AACG,C,a,CAngBC,IAAA,CACM,IAAA,CAAqB,IAAI,aAAa,IAyZrC,IAAA,CAAA,OAAA,CAAU,EACV,IAAA,CAAA,WAAA,CAAc,EAcd,IAAA,CAAA,OAAA,CAAU,EACV,IAAA,CAAA,WAAA,CAAc,C,CA0F1B,C,I,E,C,EEtjBA,EAAiB,IAAA,IAAoB,uCAAA,YAAA,GAAA,EAAwC,QAAQ,G,I,E,C,ECArF,EAAiB,IAAA,IAAoB,yCAAA,YAAA,GAAA,EAA0C,QAAQ,GJSvF,MAAM,EAAK,AANI,SAAS,aAAa,CAAC,UAMpB,UAAU,CAAC,SACzB,CACI,UAAW,CAAA,EACX,mBAAoB,CAAA,EACpB,MAAO,CAAA,EACP,MAAO,CAAA,EACP,gBAAiB,kBACrB,GAKJ,SAAS,EAAuB,CAAc,CAAE,CAAiB,EAC7D,GAAI,CAAC,EACD,OAAO,EAEX,IAAM,EAAQ,EAAO,KAAK,CAAC,MACrB,EAAiB,EAAU,MAAM,CAAC,SAClC,EAAe,EAAU,OAAO,CAAC,IAAK,GACtC,CAAC,EAAG,EAAO,CAAG,EAAU,KAAK,CAAC,EAAgB,GAAc,KAAK,CAAC,KAAK,GAAG,CAAC,AAAA,GAAK,OAAO,IAC7F,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAC9B,CAAK,CAAC,EAAE,CAAG,CAAC,EAAE,EAAI,EAAE,EAAE,EAAE,CAAK,CAAC,EAAE,CAAC,EAAE,IAAY,EAAI,EAAK,iBAAmB,GAAG,CAAC,CAGnF,MAAO,gBAAkB,EAAM,IAAI,CAAC,KACxC,CAGA,MAAM,EAAQ,AAAA,EAAO,KAAK,CAAC,EAAG,EAAG,MAAM,CAAC,KAAK,CAAE,EAAG,MAAM,CAAC,MAAM,CAAE,EAAG,IAAK,MACzE,EAAG,QAAQ,CAAC,EAAG,EAAG,EAAG,MAAM,CAAC,KAAK,CAAE,EAAG,MAAM,CAAC,MAAM,EAGnD,EAAG,UAAU,CAAC,EAAG,EAAG,EAAG,GACvB,EAAG,KAAK,CAAC,EAAG,gBAAgB,EAI5B,EAAG,MAAM,CAAC,EAAG,KAAK,EAClB,EAAG,SAAS,CAAC,EAAG,GAAG,CAAE,EAAG,mBAAmB,EAO3C,MAAM,EAAO,AAAC,GAAW,CAAC,CAAC,EAAE,CACvB,EAAiB,CAAI,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+F5B,CAAC,CACK,EAAe,CAAI,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4B1B,CAAC,CAGK,EAAU,EAAG,aAAa,GAC1B,EAAe,EAAG,YAAY,CAAC,EAAG,aAAa,EACrD,EAAG,YAAY,CAAC,EAAc,GAC9B,EAAG,aAAa,CAAC,GACjB,IAAI,EAAU,EAAG,kBAAkB,CAAC,EAAc,EAAG,cAAc,EACnE,GAAI,CAAC,EAAS,CACZ,IAAM,EAAY,EAAG,gBAAgB,CAAC,EACtC,OAAM,MAAM,CAAC;;AAAoC,EAAE,EAAU,EAAE,EAAuB,EAAgB,GAAY,CAAC,CACrH,CACA,EAAG,YAAY,CAAC,EAAS,GAEzB,MAAM,EAAiB,EAAG,YAAY,CAAC,EAAG,eAAe,EACzD,EAAG,YAAY,CAAC,EAAgB,GAChC,EAAG,aAAa,CAAC,GACjB,IAAI,EAAU,EAAG,kBAAkB,CAAC,EAAgB,EAAG,cAAc,EACrE,GAAI,CAAC,EAAS,CACZ,IAAM,EAAY,EAAG,gBAAgB,CAAC,EACtC,OAAM,MAAM,CAAC;;AAAkC,EAAE,EAAU,EAAE,EAAuB,EAAc,GAAY,CAAC,CACjH,CACA,EAAG,YAAY,CAAC,EAAS,GAEzB,EAAG,yBAAyB,CAAC,EAAS,CAAC,gBAAiB,gBAAiB,gBAAiB,uBAAwB,cAAc,CAAE,EAAG,mBAAmB,EACxJ,EAAG,WAAW,CAAC,GAGV,EAAG,mBAAmB,CAAC,EAAS,EAAG,WAAW,IAC/C,QAAQ,GAAG,CAAC,EAAG,gBAAgB,CAAC,IAChC,QAAQ,GAAG,CAAC,EAAG,gBAAgB,CAAC,KAGpC,EAAG,UAAU,CAAC,GAQd,MAAM,EAAQ,AAAU,EAAV,KAAK,EAAE,CAGf,EAAe,IAAI,aAAa,KAEtC,IAAK,IAAI,EAAI,EAAG,EAAI,IAA+B,GAH5B,EAInB,EAAa,GAAG,CAAC,CACb,AAAe,IAAf,KAAK,MAAM,GAAS,AAAc,IAAd,KAAK,MAAM,GAE/B,AAAgB,IAAhB,KAAK,MAAM,GAAW,IAAK,AAAgB,IAAhB,KAAK,MAAM,GAAW,IACjD,KAAK,MAAM,GAAK,EAChB,AAAgB,IAAhB,KAAK,MAAM,GACX,AAAc,IAAd,KAAK,MAAM,GACd,CAAE,GAsCP,IAAI,EAAiC,EAAE,CACnC,EAAyB,EAAE,CAE/B,MAAM,EAAsB,EAAG,YAAY,GACrC,EAAO,EAAG,iBAAiB,GACjC,EAAG,eAAe,CAAC,GACnB,EAAG,UAAU,CAAC,EAAG,YAAY,CAAE,GAC/B,EAAG,UAAU,CAAC,EAAG,YAAY,CAAE,KAA+C,EAAG,YAAY,EAC7F,EAAG,aAAa,CAAC,EAAG,YAAY,CAAE,EAAG,GACrC,IAAI,EAAS,EAEb,EAAG,mBAAmB,CAAC,EAAG,EAAG,EAAG,KAAK,CAAE,CAAA,EAAO,GAAgC,GAC9E,GAAU,EAEV,EAAG,mBAAmB,CAAC,EAAG,EAAG,EAAG,KAAK,CAAE,CAAA,EAAO,GAAgC,GAC9E,GAAU,EAEV,EAAG,mBAAmB,CAAC,EAAG,EAAG,EAAG,KAAK,CAAE,CAAA,EAAO,GAAgC,GAC9E,GAAU,EAEV,EAAG,mBAAmB,CAAC,EAAG,EAAG,EAAG,KAAK,CAAE,CAAA,EAAO,GAAgC,GAC9E,GAAU,EAEV,EAAG,mBAAmB,CAAC,EAAG,EAAG,EAAG,KAAK,CAAE,CAAA,EAAO,GAAgC,GAC9E,GAAU,EAGV,EAAG,uBAAuB,CAAC,GAC3B,EAAG,uBAAuB,CAAC,GAC3B,EAAG,uBAAuB,CAAC,GAC3B,EAAG,uBAAuB,CAAC,GAC3B,EAAG,uBAAuB,CAAC,GAE3B,EAAK,IAAI,CAAC,GACV,EAAQ,IAAI,CAAC,GAEb,EAAG,eAAe,CAAC,MACnB,EAAG,UAAU,CAAC,EAAG,YAAY,CAAE,MAE/B,MAAM,EAAsB,EAAG,YAAY,GACrC,EAAO,EAAG,iBAAiB,GACjC,EAAG,eAAe,CAAC,GACnB,EAAG,UAAU,CAAC,EAAG,YAAY,CAAE,GAC/B,EAAG,UAAU,CAAC,EAAG,YAAY,CAAE,KAA+C,EAAG,YAAY,EAC7F,IAAI,EAAS,EAEb,EAAG,mBAAmB,CAAC,EAAG,EAAG,EAAG,KAAK,CAAE,CAAA,EAAO,GAAgC,GAC9E,GAAU,EAEV,EAAG,mBAAmB,CAAC,EAAG,EAAG,EAAG,KAAK,CAAE,CAAA,EAAO,GAAgC,GAC9E,GAAU,EAEV,EAAG,mBAAmB,CAAC,EAAG,EAAG,EAAG,KAAK,CAAE,CAAA,EAAO,GAAgC,GAC9E,GAAU,EAEV,EAAG,mBAAmB,CAAC,EAAG,EAAG,EAAG,KAAK,CAAE,CAAA,EAAO,GAAgC,GAC9E,GAAU,EAEV,EAAG,mBAAmB,CAAC,EAAG,EAAG,EAAG,KAAK,CAAE,CAAA,EAAO,GAAgC,GAC9E,GAAU,EAGV,EAAG,uBAAuB,CAAC,GAC3B,EAAG,uBAAuB,CAAC,GAC3B,EAAG,uBAAuB,CAAC,GAC3B,EAAG,uBAAuB,CAAC,GAC3B,EAAG,uBAAuB,CAAC,GAE3B,EAAK,IAAI,CAAC,GACV,EAAQ,IAAI,CAAC,GAGb,EAAG,eAAe,CAAC,MACnB,EAAG,UAAU,CAAC,EAAG,YAAY,CAAE,MAI/B,MAAM,EAAW,EAAG,kBAAkB,CAAC,EAAS,YAC1C,EAAW,EAAG,kBAAkB,CAAC,EAAS,WAC1C,EAAY,EAAG,kBAAkB,CAAC,EAAS,WAC3C,EAAY,EAAG,kBAAkB,CAAC,EAAS,WAC3C,EAAY,EAAG,kBAAkB,CAAC,EAAS,WAC3C,EAAa,EAAG,kBAAkB,CAAC,EAAS,YAE5C,EAAY,EAAG,aAAa,GAClC,EAAG,WAAW,CAAC,EAAG,UAAU,CAAE,GAC9B,EAAG,WAAW,CAAC,EAAG,8BAA8B,CAAE,CAAA,GAElD,EAAG,aAAa,CAAC,EAAG,UAAU,CAAE,EAAG,cAAc,CAAE,EAAG,aAAa,EACnE,EAAG,aAAa,CAAC,EAAG,UAAU,CAAE,EAAG,cAAc,CAAE,EAAG,aAAa,EACnE,EAAG,aAAa,CAAC,EAAG,UAAU,CAAE,EAAG,kBAAkB,CAAE,EAAG,OAAO,EACjE,EAAG,aAAa,CAAC,EAAG,UAAU,CAAE,EAAG,kBAAkB,CAAE,EAAG,OAAO,EACjE,MAAM,EAAS,IAAI,KACnB,CAAA,EAAO,MAAM,CAAG,KACZ,EAAG,aAAa,CAAC,EAAG,QAAQ,EAC5B,EAAG,WAAW,CAAC,EAAG,UAAU,CAAE,GAC9B,EAAG,UAAU,CAAC,EAAG,UAAU,CAAE,EAAG,EAAG,IAAI,CAAE,EAAG,IAAI,CAAE,EAAG,aAAa,CAAE,GACpE,EAAG,WAAW,CAAC,EAAG,UAAU,CAAE,KAClC,EACA,EAAO,GAAG,CAAG,EAAA,GAEb,MAAM,EAAc,EAAG,aAAa,GAC9B,EAAW,IAAI,MACrB,EAAG,WAAW,CAAC,EAAG,UAAU,CAAE,GAC9B,EAAG,WAAW,CAAC,EAAG,8BAA8B,CAAE,CAAA,GAElD,EAAG,aAAa,CAAC,EAAG,UAAU,CAAE,EAAG,cAAc,CAAE,EAAG,aAAa,EACnE,EAAG,aAAa,CAAC,EAAG,UAAU,CAAE,EAAG,cAAc,CAAE,EAAG,aAAa,EACnE,EAAG,aAAa,CAAC,EAAG,UAAU,CAAE,EAAG,kBAAkB,CAAE,EAAG,OAAO,EACjE,EAAG,aAAa,CAAC,EAAG,UAAU,CAAE,EAAG,kBAAkB,CAAE,EAAG,OAAO,EACjE,EAAS,MAAM,CAAG,KACd,EAAG,aAAa,CAAC,EAAG,QAAQ,CAAG,GAC/B,EAAG,WAAW,CAAC,EAAG,UAAU,CAAE,GAC9B,EAAG,UAAU,CAAC,EAAG,UAAU,CAAE,EAAG,EAAG,IAAI,CAAE,EAAG,IAAI,CAAE,EAAG,aAAa,CAAE,EAExE,EACA,EAAS,GAAG,CAAG,EAAA,GAEf,IAAI,EAAU,IACd,MAAM,EAAwB,SAAS,aAAa,CAAC,iBACrD,CAAA,EAAsB,SAAS,CAAG,EAAQ,QAAQ,GAElD,MAAM,EAAiB,SAAS,aAAa,CAAC,aAC9C,CAAA,EAAe,KAAK,CAAG,EAAQ,QAAQ,GACvC,EAAe,gBAAgB,CAAC,SAAU,AAAA,IACtC,EAAU,CAAE,GAAK,OAA6B,MAC9C,EAAsB,SAAS,CAAG,EAAQ,QAAQ,EACtD,GAGA,IAAI,EAAQ,EACR,EAAa,CAAI,CAAC,EAAY,CAC9B,EAAgB,CAAO,CAAE,AAAA,CAAA,EAAQ,CAAA,EAAK,EAAE,CACxC,EAAW,EACf,MAAM,EAAO,AAAC,IACV,sBAAsB,GAEtB,IAAI,EAAY,EAAY,EAC5B,EAAW,EACP,GAAa,GACb,CAAA,EAAY,CAAA,EAGhB,EAAG,gBAAgB,CAAC,EAAU,CAAA,EAAO,EAAM,IAAI,EAC/C,EAAG,SAAS,CAAC,EAAU,KAAK,MAAM,IAClC,EAAG,SAAS,CAAC,EAAW,GACxB,EAAG,UAAU,CAAC,EAAW,CAAC,EAAG,KAAK,EAClC,EAAG,aAAa,CAAC,EAAG,QAAQ,EAC5B,EAAG,WAAW,CAAC,EAAG,UAAU,CAAE,GAC9B,EAAG,SAAS,CAAC,EAAW,GAExB,EAAG,aAAa,CAAC,EAAG,QAAQ,CAAG,GAC/B,EAAG,WAAW,CAAC,EAAG,UAAU,CAAE,GAC9B,EAAG,SAAS,CAAC,EAAY,GAEzB,EAAG,UAAU,CAAC,EAAG,EAAG,EAAG,GACvB,EAAG,KAAK,CAAC,EAAG,gBAAgB,EAG5B,EAAG,eAAe,CAAC,GACnB,EAAG,cAAc,CAAC,EAAG,yBAAyB,CAAE,EAAG,GAGnD,EAAG,sBAAsB,CAAC,EAAG,MAAM,EACnC,EAAG,UAAU,CAAC,EAAG,MAAM,CAAE,EAAG,GAC5B,EAAG,oBAAoB,GAGvB,EAAG,eAAe,CAAC,MACnB,EAAG,cAAc,CAAC,EAAG,yBAAyB,CAAE,EAAG,MAGnD,EAAa,CAAI,CAAC,EAAU,EAAE,CAC9B,EAAgB,CAAO,CAAE,AAAA,CAAA,EAAQ,CAAA,EAAK,EAAE,CACxC,EAAQ,AAAC,CAAA,EAAQ,CAAA,EAAK,CAC1B,EACA,EAAK,YAAY,GAAG","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-301bdcd1df041291.js","index.ts","matrix.ts","vector.ts","node_modules/@parcel/runtime-js/lib/runtime-94ee7a9aaa853ccc.js","node_modules/@parcel/runtime-js/lib/runtime-13c0ab5314701cf0.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"27Lyk\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $18c11f3350a906ea$export$6503ec6e8aabbaf, (v) => $18c11f3350a906ea$export$6503ec6e8aabbaf = v);\nvar $18c11f3350a906ea$export$6503ec6e8aabbaf;\nvar $18c11f3350a906ea$export$f7ad0328861e2f03;\n\"use strict\";\nvar $18c11f3350a906ea$var$mapping = new Map();\nfunction $18c11f3350a906ea$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$18c11f3350a906ea$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $18c11f3350a906ea$var$resolve(id) {\n    var resolved = $18c11f3350a906ea$var$mapping.get(id);\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$18c11f3350a906ea$export$6503ec6e8aabbaf = $18c11f3350a906ea$var$register;\n$18c11f3350a906ea$export$f7ad0328861e2f03 = $18c11f3350a906ea$var$resolve;\n\n});\n\nvar $5474211893c87727$exports = {};\n\n(parcelRequire(\"27Lyk\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse('[\"lWpsB\",\"index.cace3297.js\",\"ghyAv\",\"sprite.7cf94011.png\",\"cfGOW\",\"obstacle.af1de7c7.png\"]'));\n\n/**\n * A 2D vector on a plane.\n */ class $4654a2d5137d0d5f$export$9b781de7bf37bf48 {\n    /**\n   * A (0, 0) vector\n   */ static get Zero() {\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(0, 0);\n    }\n    /**\n   * A (1, 1) vector\n   */ static get One() {\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(1, 1);\n    }\n    /**\n   * A (0.5, 0.5) vector\n   */ static get Half() {\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(0.5, 0.5);\n    }\n    /**\n   * A unit vector pointing up (0, -1)\n   */ static get Up() {\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(0, -1);\n    }\n    /**\n   * A unit vector pointing down (0, 1)\n   */ static get Down() {\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(0, 1);\n    }\n    /**\n   * A unit vector pointing left (-1, 0)\n   */ static get Left() {\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(-1, 0);\n    }\n    /**\n   * A unit vector pointing right (1, 0)\n   */ static get Right() {\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(1, 0);\n    }\n    /**\n   * Returns a vector of unit length in the direction of the specified angle in Radians.\n   * @param angle The angle to generate the vector\n   */ static fromAngle(angle) {\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(Math.cos(angle), Math.sin(angle));\n    }\n    /**\n   * Checks if vector is not null, undefined, or if any of its components are NaN or Infinity.\n   */ static isValid(vec) {\n        if (vec === null || vec === undefined) return false;\n        if (isNaN(vec.x) || isNaN(vec.y)) return false;\n        if (vec.x === Infinity || vec.y === Infinity || vec.x === -Infinity || vec.y === -Infinity) return false;\n        return true;\n    }\n    /**\n   * Calculates distance between two Vectors\n   * @param vec1\n   * @param vec2\n   */ static distance(vec1, vec2) {\n        return Math.sqrt(Math.pow(vec1.x - vec2.x, 2) + Math.pow(vec1.y - vec2.y, 2));\n    }\n    static min(vec1, vec2) {\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(Math.min(vec1.x, vec2.x), Math.min(vec1.y, vec2.y));\n    }\n    static max(vec1, vec2) {\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(Math.max(vec1.x, vec2.x), Math.max(vec1.y, vec2.y));\n    }\n    /**\n   * @param x  X component of the Vector\n   * @param y  Y component of the Vector\n   */ constructor(x, y){\n        this._x = 0;\n        this._y = 0;\n        this._x = x;\n        this._y = y;\n    }\n    /**\n   * Get the x component of the vector\n   */ get x() {\n        return this._x;\n    }\n    /**\n   * Set the x component, THIS MUTATES the current vector. It is usually better to create a new vector.\n   * @warning **Be very careful setting components on shared vectors, mutating shared vectors can cause hard to find bugs**\n   */ set x(val) {\n        this._x = val;\n    }\n    /**\n   * Get the y component of the vector\n   */ get y() {\n        return this._y;\n    }\n    /**\n   * Set the y component, THIS MUTATES the current vector. It is usually better to create a new vector.\n   * @warning **Be very careful setting components on shared vectors, mutating shared vectors can cause hard to find bugs**\n   */ set y(val) {\n        this._y = val;\n    }\n    /**\n   * Sets the x and y components at once, THIS MUTATES the current vector. It is usually better to create a new vector.\n   * @warning **Be very careful using this, mutating vectors can cause hard to find bugs**\n   */ setTo(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    /**\n   * Compares this point against another and tests for equality\n   * @param vector The other point to compare to\n   * @param tolerance Amount of euclidean distance off we are willing to tolerate\n   */ equals(vector, tolerance = 0.001) {\n        return Math.abs(this.x - vector.x) <= tolerance && Math.abs(this.y - vector.y) <= tolerance;\n    }\n    /**\n   * The distance to another vector. If no other Vector is specified, this will return the [[magnitude]].\n   * @param v  The other vector. Leave blank to use origin vector.\n   */ distance(v) {\n        if (!v) return Math.sqrt(this.x * this.x + this.y * this.y);\n        const deltaX = this.x - v.x;\n        const deltaY = this.y - v.y;\n        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n    }\n    squareDistance(v) {\n        if (!v) v = $4654a2d5137d0d5f$export$9b781de7bf37bf48.Zero;\n        const deltaX = this.x - v.x;\n        const deltaY = this.y - v.y;\n        return deltaX * deltaX + deltaY * deltaY;\n    }\n    /**\n   * The size (magnitude) of the Vector\n   */ get size() {\n        return this.distance();\n    }\n    /**\n   * Setting the size mutates the current vector\n   * @warning Can be used to set the size of the vector, **be very careful using this, mutating vectors can cause hard to find bugs**\n   */ set size(newLength) {\n        const v = this.normalize().scale(newLength);\n        this.setTo(v.x, v.y);\n    }\n    /**\n   * Normalizes a vector to have a magnitude of 1.\n   */ normalize() {\n        const d = this.distance();\n        if (d > 0) return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(this.x / d, this.y / d);\n        else return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(0, 1);\n    }\n    /**\n   * Returns the average (midpoint) between the current point and the specified\n   */ average(vec) {\n        return this.add(vec).scale(0.5);\n    }\n    scale(sizeOrScale, dest) {\n        const result = dest || new $4654a2d5137d0d5f$export$9b781de7bf37bf48(0, 0);\n        if (sizeOrScale instanceof $4654a2d5137d0d5f$export$9b781de7bf37bf48) {\n            result.x = this.x * sizeOrScale.x;\n            result.y = this.y * sizeOrScale.y;\n        } else {\n            result.x = this.x * sizeOrScale;\n            result.y = this.y * sizeOrScale;\n        }\n        return result;\n    }\n    /**\n   * Adds one vector to another\n   * @param v The vector to add\n   * @param dest Optionally copy the result into a provided vector\n   */ add(v, dest) {\n        if (dest) {\n            dest.x = this.x + v.x;\n            dest.y = this.y + v.y;\n            return dest;\n        }\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(this.x + v.x, this.y + v.y);\n    }\n    /**\n   * Subtracts a vector from another, if you subtract vector `B.sub(A)` the resulting vector points from A -> B\n   * @param v The vector to subtract\n   */ sub(v) {\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(this.x - v.x, this.y - v.y);\n    }\n    /**\n   * Adds one vector to this one modifying the original\n   * @param v The vector to add\n   * @warning Be very careful using this, mutating vectors can cause hard to find bugs\n   */ addEqual(v) {\n        this.setTo(this.x + v.x, this.y + v.y);\n        return this;\n    }\n    /**\n   * Subtracts a vector from this one modifying the original\n   * @param v The vector to subtract\n   * @warning Be very careful using this, mutating vectors can cause hard to find bugs\n   */ subEqual(v) {\n        this.setTo(this.x - v.x, this.y - v.y);\n        return this;\n    }\n    /**\n   * Scales this vector by a factor of size and modifies the original\n   * @warning Be very careful using this, mutating vectors can cause hard to find bugs\n   */ scaleEqual(size) {\n        this.setTo(this.x * size, this.y * size);\n        return this;\n    }\n    /**\n   * Performs a dot product with another vector\n   * @param v  The vector to dot\n   */ dot(v) {\n        return this.x * v.x + this.y * v.y;\n    }\n    cross(v) {\n        if (v instanceof $4654a2d5137d0d5f$export$9b781de7bf37bf48) return this.x * v.y - this.y * v.x;\n        else if (typeof v === \"number\") return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(v * this.y, -v * this.x);\n    }\n    static cross(num, vec) {\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(-num * vec.y, num * vec.x);\n    }\n    /**\n   * Returns the perpendicular vector to this one\n   */ perpendicular() {\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(this.y, -this.x);\n    }\n    /**\n   * Returns the normal vector to this one, same as the perpendicular of length 1\n   */ normal() {\n        return this.perpendicular().normalize();\n    }\n    /**\n   * Negate the current vector\n   */ negate() {\n        return this.scale(-1);\n    }\n    /**\n   * Returns the angle of this vector.\n   */ toAngle() {\n        return Math.atan2(this.y, this.x);\n    }\n    /**\n   * Rotates the current vector around a point by a certain number of\n   * degrees in radians\n   */ rotate(angle, anchor) {\n        if (!anchor) anchor = new $4654a2d5137d0d5f$export$9b781de7bf37bf48(0, 0);\n        const sinAngle = Math.sin(angle);\n        const cosAngle = Math.cos(angle);\n        const x = cosAngle * (this.x - anchor.x) - sinAngle * (this.y - anchor.y) + anchor.x;\n        const y = sinAngle * (this.x - anchor.x) + cosAngle * (this.y - anchor.y) + anchor.y;\n        return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(x, y);\n    }\n    /**\n   * Creates new vector that has the same values as the previous.\n   */ clone(dest) {\n        const v = dest ?? new $4654a2d5137d0d5f$export$9b781de7bf37bf48(0, 0);\n        v.x = this.x;\n        v.y = this.y;\n        return v;\n    }\n    /**\n   * Returns a string representation of the vector.\n   */ toString(fixed) {\n        if (fixed) return `(${this.x.toFixed(fixed)}, ${this.y.toFixed(fixed)})`;\n        return `(${this.x}, ${this.y})`;\n    }\n}\nfunction $4654a2d5137d0d5f$export$202e0172ed3c7be0(x, y) {\n    return new $4654a2d5137d0d5f$export$9b781de7bf37bf48(x, y);\n}\n\n\nconst $cafce761e2c8b5f4$var$TwoPI = Math.PI * 2;\nfunction $cafce761e2c8b5f4$export$a4913eafbb02ceb4(angle) {\n    let tmpAngle = angle;\n    if (angle > $cafce761e2c8b5f4$var$TwoPI) while(tmpAngle > $cafce761e2c8b5f4$var$TwoPI)tmpAngle -= $cafce761e2c8b5f4$var$TwoPI;\n    if (angle < 0) while(tmpAngle < 0)tmpAngle += $cafce761e2c8b5f4$var$TwoPI;\n    return tmpAngle;\n}\nfunction $cafce761e2c8b5f4$export$c5552dfdbc7cec71(val) {\n    if (val === 0) return 0;\n    return val < 0 ? -1 : 1;\n}\nvar $cafce761e2c8b5f4$export$9f9b2346169b00c0;\n(function(MatrixLocations) {\n    MatrixLocations[MatrixLocations[\"X\"] = 12] = \"X\";\n    MatrixLocations[MatrixLocations[\"Y\"] = 13] = \"Y\";\n})($cafce761e2c8b5f4$export$9f9b2346169b00c0 || ($cafce761e2c8b5f4$export$9f9b2346169b00c0 = {}));\nclass $cafce761e2c8b5f4$export$5b12bf1653c0dd85 {\n    /**\n     * Creates an orthographic (flat non-perspective) projection\n     * https://en.wikipedia.org/wiki/Orthographic_projection\n     * @param left\n     * @param right\n     * @param bottom\n     * @param top\n     * @param near\n     * @param far\n     */ static ortho(left, right, bottom, top, near, far) {\n        const mat = new $cafce761e2c8b5f4$export$5b12bf1653c0dd85();\n        mat.data[0] = 2 / (right - left);\n        mat.data[1] = 0;\n        mat.data[2] = 0;\n        mat.data[3] = 0;\n        mat.data[4] = 0;\n        mat.data[5] = 2 / (top - bottom);\n        mat.data[6] = 0;\n        mat.data[7] = 0;\n        mat.data[8] = 0;\n        mat.data[9] = 0;\n        mat.data[10] = -2 / (far - near);\n        mat.data[11] = 0;\n        mat.data[12] = -(right + left) / (right - left);\n        mat.data[13] = -(top + bottom) / (top - bottom);\n        mat.data[14] = -(far + near) / (far - near);\n        mat.data[15] = 1;\n        return mat;\n    }\n    /**\n     * Creates a new Matrix with the same data as the current 4x4\n     */ clone(dest) {\n        const mat = dest || new $cafce761e2c8b5f4$export$5b12bf1653c0dd85();\n        mat.data[0] = this.data[0];\n        mat.data[1] = this.data[1];\n        mat.data[2] = this.data[2];\n        mat.data[3] = this.data[3];\n        mat.data[4] = this.data[4];\n        mat.data[5] = this.data[5];\n        mat.data[6] = this.data[6];\n        mat.data[7] = this.data[7];\n        mat.data[8] = this.data[8];\n        mat.data[9] = this.data[9];\n        mat.data[10] = this.data[10];\n        mat.data[11] = this.data[11];\n        mat.data[12] = this.data[12];\n        mat.data[13] = this.data[13];\n        mat.data[14] = this.data[14];\n        mat.data[15] = this.data[15];\n        return mat;\n    }\n    /**\n     * Converts the current matrix into a DOMMatrix\n     *\n     * This is useful when working with the browser Canvas context\n     * @returns {DOMMatrix} DOMMatrix\n     */ toDOMMatrix() {\n        return new DOMMatrix([\n            ...this.data\n        ]);\n    }\n    static fromFloat32Array(data) {\n        const matrix = new $cafce761e2c8b5f4$export$5b12bf1653c0dd85();\n        matrix.data = data;\n        return matrix;\n    }\n    /**\n     * Creates a new identity matrix (a matrix that when applied does nothing)\n     */ static identity() {\n        const mat = new $cafce761e2c8b5f4$export$5b12bf1653c0dd85();\n        mat.data[0] = 1;\n        mat.data[1] = 0;\n        mat.data[2] = 0;\n        mat.data[3] = 0;\n        mat.data[4] = 0;\n        mat.data[5] = 1;\n        mat.data[6] = 0;\n        mat.data[7] = 0;\n        mat.data[8] = 0;\n        mat.data[9] = 0;\n        mat.data[10] = 1;\n        mat.data[11] = 0;\n        mat.data[12] = 0;\n        mat.data[13] = 0;\n        mat.data[14] = 0;\n        mat.data[15] = 1;\n        return mat;\n    }\n    /**\n     * Resets the current matrix to the identity matrix, mutating it\n     * @returns {Matrix} Current matrix as identity\n     */ reset() {\n        const mat = this;\n        mat.data[0] = 1;\n        mat.data[1] = 0;\n        mat.data[2] = 0;\n        mat.data[3] = 0;\n        mat.data[4] = 0;\n        mat.data[5] = 1;\n        mat.data[6] = 0;\n        mat.data[7] = 0;\n        mat.data[8] = 0;\n        mat.data[9] = 0;\n        mat.data[10] = 1;\n        mat.data[11] = 0;\n        mat.data[12] = 0;\n        mat.data[13] = 0;\n        mat.data[14] = 0;\n        mat.data[15] = 1;\n        return mat;\n    }\n    /**\n     * Creates a brand new translation matrix at the specified 3d point\n     * @param x\n     * @param y\n     */ static translation(x, y) {\n        const mat = $cafce761e2c8b5f4$export$5b12bf1653c0dd85.identity();\n        mat.data[12] = x;\n        mat.data[13] = y;\n        return mat;\n    }\n    /**\n     * Creates a brand new scaling matrix with the specified scaling factor\n     * @param sx\n     * @param sy\n     */ static scale(sx, sy) {\n        const mat = $cafce761e2c8b5f4$export$5b12bf1653c0dd85.identity();\n        mat.data[0] = sx;\n        mat.data[5] = sy;\n        mat.data[10] = 1;\n        mat.data[15] = 1;\n        return mat;\n    }\n    /**\n     * Creates a brand new rotation matrix with the specified angle\n     * @param angleRadians\n     */ static rotation(angleRadians) {\n        const mat = $cafce761e2c8b5f4$export$5b12bf1653c0dd85.identity();\n        mat.data[0] = Math.cos(angleRadians);\n        mat.data[4] = -Math.sin(angleRadians);\n        mat.data[1] = Math.sin(angleRadians);\n        mat.data[5] = Math.cos(angleRadians);\n        return mat;\n    }\n    multiply(vectorOrMatrix, dest) {\n        if (vectorOrMatrix instanceof (0, $4654a2d5137d0d5f$export$9b781de7bf37bf48)) {\n            const result = dest || new (0, $4654a2d5137d0d5f$export$9b781de7bf37bf48)(0, 0);\n            const vector = vectorOrMatrix;\n            // these shenanigans are to allow dest and vector to be the same instance\n            const resultX = vector.x * this.data[0] + vector.y * this.data[4] + this.data[12];\n            const resultY = vector.x * this.data[1] + vector.y * this.data[5] + this.data[13];\n            result.x = resultX;\n            result.y = resultY;\n            return result;\n        } else {\n            const result = dest || new $cafce761e2c8b5f4$export$5b12bf1653c0dd85();\n            const other = vectorOrMatrix;\n            const a11 = this.data[0];\n            const a21 = this.data[1];\n            const a31 = this.data[2];\n            const a41 = this.data[3];\n            const a12 = this.data[4];\n            const a22 = this.data[5];\n            const a32 = this.data[6];\n            const a42 = this.data[7];\n            const a13 = this.data[8];\n            const a23 = this.data[9];\n            const a33 = this.data[10];\n            const a43 = this.data[11];\n            const a14 = this.data[12];\n            const a24 = this.data[13];\n            const a34 = this.data[14];\n            const a44 = this.data[15];\n            const b11 = other.data[0];\n            const b21 = other.data[1];\n            const b31 = other.data[2];\n            const b41 = other.data[3];\n            const b12 = other.data[4];\n            const b22 = other.data[5];\n            const b32 = other.data[6];\n            const b42 = other.data[7];\n            const b13 = other.data[8];\n            const b23 = other.data[9];\n            const b33 = other.data[10];\n            const b43 = other.data[11];\n            const b14 = other.data[12];\n            const b24 = other.data[13];\n            const b34 = other.data[14];\n            const b44 = other.data[15];\n            result.data[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n            result.data[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n            result.data[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n            result.data[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n            result.data[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n            result.data[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n            result.data[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n            result.data[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n            result.data[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n            result.data[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n            result.data[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n            result.data[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n            result.data[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n            result.data[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n            result.data[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n            result.data[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n            const s = this.getScale();\n            result._scaleSignX = $cafce761e2c8b5f4$export$c5552dfdbc7cec71(s.x) * $cafce761e2c8b5f4$export$c5552dfdbc7cec71(result._scaleSignX);\n            result._scaleSignY = $cafce761e2c8b5f4$export$c5552dfdbc7cec71(s.y) * $cafce761e2c8b5f4$export$c5552dfdbc7cec71(result._scaleSignY);\n            return result;\n        }\n    }\n    /**\n     * Applies translation to the current matrix mutating it\n     * @param x\n     * @param y\n     */ translate(x, y) {\n        const a11 = this.data[0];\n        const a21 = this.data[1];\n        const a31 = this.data[2];\n        const a41 = this.data[3];\n        const a12 = this.data[4];\n        const a22 = this.data[5];\n        const a32 = this.data[6];\n        const a42 = this.data[7];\n        const a13 = this.data[8];\n        const a23 = this.data[9];\n        const a33 = this.data[10];\n        const a43 = this.data[11];\n        const a14 = this.data[12];\n        const a24 = this.data[13];\n        const a34 = this.data[14];\n        const a44 = this.data[15];\n        // Doesn't change z\n        const z = 0;\n        const w = 1;\n        this.data[12] = a11 * x + a12 * y + a13 * z + a14 * w;\n        this.data[13] = a21 * x + a22 * y + a23 * z + a24 * w;\n        this.data[14] = a31 * x + a32 * y + a33 * z + a34 * w;\n        this.data[15] = a41 * x + a42 * y + a43 * z + a44 * w;\n        return this;\n    }\n    setPosition(x, y) {\n        this.data[12] = x;\n        this.data[13] = y;\n    }\n    getPosition() {\n        return (0, $4654a2d5137d0d5f$export$202e0172ed3c7be0)(this.data[12], this.data[13]);\n    }\n    /**\n     * Applies rotation to the current matrix mutating it\n     * @param angle in Radians\n     */ rotate(angle) {\n        const a11 = this.data[0];\n        const a21 = this.data[1];\n        const a31 = this.data[2];\n        const a41 = this.data[3];\n        const a12 = this.data[4];\n        const a22 = this.data[5];\n        const a32 = this.data[6];\n        const a42 = this.data[7];\n        const sine = Math.sin(angle);\n        const cosine = Math.cos(angle);\n        this.data[0] = cosine * a11 + sine * a12;\n        this.data[1] = cosine * a21 + sine * a22;\n        this.data[2] = cosine * a31 + sine * a32;\n        this.data[3] = cosine * a41 + sine * a42;\n        this.data[4] = cosine * a12 - sine * a11;\n        this.data[5] = cosine * a22 - sine * a21;\n        this.data[6] = cosine * a32 - sine * a31;\n        this.data[7] = cosine * a42 - sine * a41;\n        return this;\n    }\n    /**\n     * Applies scaling to the current matrix mutating it\n     * @param x\n     * @param y\n     */ scale(x, y) {\n        const a11 = this.data[0];\n        const a21 = this.data[1];\n        const a31 = this.data[2];\n        const a41 = this.data[3];\n        const a12 = this.data[4];\n        const a22 = this.data[5];\n        const a32 = this.data[6];\n        const a42 = this.data[7];\n        this.data[0] = a11 * x;\n        this.data[1] = a21 * x;\n        this.data[2] = a31 * x;\n        this.data[3] = a41 * x;\n        this.data[4] = a12 * y;\n        this.data[5] = a22 * y;\n        this.data[6] = a32 * y;\n        this.data[7] = a42 * y;\n        return this;\n    }\n    setRotation(angle) {\n        const currentScale = this.getScale();\n        const sine = Math.sin(angle);\n        const cosine = Math.cos(angle);\n        this.data[0] = cosine * currentScale.x;\n        this.data[1] = sine * currentScale.y;\n        this.data[4] = -sine * currentScale.x;\n        this.data[5] = cosine * currentScale.y;\n    }\n    getRotation() {\n        const angle = Math.atan2(this.data[1] / this.getScaleY(), this.data[0] / this.getScaleX());\n        return $cafce761e2c8b5f4$export$a4913eafbb02ceb4(angle);\n    }\n    getScaleX() {\n        // absolute scale of the matrix (we lose sign so need to add it back)\n        const xscale = (0, $4654a2d5137d0d5f$export$202e0172ed3c7be0)(this.data[0], this.data[4]).size;\n        return this._scaleSignX * xscale;\n    }\n    getScaleY() {\n        // absolute scale of the matrix (we lose sign so need to add it back)\n        const yscale = (0, $4654a2d5137d0d5f$export$202e0172ed3c7be0)(this.data[1], this.data[5]).size;\n        return this._scaleSignY * yscale;\n    }\n    /**\n     * Get the scale of the matrix\n     */ getScale() {\n        return (0, $4654a2d5137d0d5f$export$202e0172ed3c7be0)(this.getScaleX(), this.getScaleY());\n    }\n    setScaleX(val) {\n        if (this._scaleX === val) return;\n        this._scaleSignX = $cafce761e2c8b5f4$export$c5552dfdbc7cec71(val);\n        // negative scale acts like a 180 rotation, so flip\n        const xscale = (0, $4654a2d5137d0d5f$export$202e0172ed3c7be0)(this.data[0] * this._scaleSignX, this.data[4] * this._scaleSignX).normalize();\n        this.data[0] = xscale.x * val;\n        this.data[4] = xscale.y * val;\n        this._scaleX = val;\n    }\n    setScaleY(val) {\n        if (this._scaleY === val) return;\n        this._scaleSignY = $cafce761e2c8b5f4$export$c5552dfdbc7cec71(val);\n        // negative scale acts like a 180 rotation, so flip\n        const yscale = (0, $4654a2d5137d0d5f$export$202e0172ed3c7be0)(this.data[1] * this._scaleSignY, this.data[5] * this._scaleSignY).normalize();\n        this.data[1] = yscale.x * val;\n        this.data[5] = yscale.y * val;\n        this._scaleY = val;\n    }\n    setScale(scale) {\n        this.setScaleX(scale.x);\n        this.setScaleY(scale.y);\n    }\n    /**\n     * Determinant of the upper left 2x2 matrix\n     */ getBasisDeterminant() {\n        return this.data[0] * this.data[5] - this.data[1] * this.data[4];\n    }\n    /**\n     * Return the affine inverse, optionally store it in a target matrix.\n     *\n     * It's recommended you call .reset() the target unless you know what you're doing\n     * @param target\n     */ getAffineInverse(target) {\n        // See http://negativeprobability.blogspot.com/2011/11/affine-transformations-and-their.html\n        // See https://www.mathsisfun.com/algebra/matrix-inverse.html\n        // Since we are actually only doing 2D transformations we can use this hack\n        // We don't actually use the 3rd or 4th dimension\n        const det = this.getBasisDeterminant();\n        const inverseDet = 1 / det; // todo zero check\n        const a = this.data[0];\n        const b = this.data[4];\n        const c = this.data[1];\n        const d = this.data[5];\n        const m = target || $cafce761e2c8b5f4$export$5b12bf1653c0dd85.identity();\n        // inverts rotation and scale\n        m.data[0] = d * inverseDet;\n        m.data[1] = -c * inverseDet;\n        m.data[4] = -b * inverseDet;\n        m.data[5] = a * inverseDet;\n        const tx = this.data[12];\n        const ty = this.data[13];\n        // invert translation\n        // transform translation into the matrix basis created by rot/scale\n        m.data[12] = -(tx * m.data[0] + ty * m.data[4]);\n        m.data[13] = -(tx * m.data[1] + ty * m.data[5]);\n        return m;\n    }\n    isIdentity() {\n        return this.data[0] === 1 && this.data[1] === 0 && this.data[2] === 0 && this.data[3] === 0 && this.data[4] === 0 && this.data[5] === 1 && this.data[6] === 0 && this.data[7] === 0 && this.data[8] === 0 && this.data[9] === 0 && this.data[10] === 1 && this.data[11] === 0 && this.data[12] === 0 && this.data[13] === 0 && this.data[14] === 0 && this.data[15] === 1;\n    }\n    toString() {\n        return `\n[${this.data[0]} ${this.data[4]} ${this.data[8]} ${this.data[12]}]\n[${this.data[1]} ${this.data[5]} ${this.data[9]} ${this.data[13]}]\n[${this.data[2]} ${this.data[6]} ${this.data[10]} ${this.data[14]}]\n[${this.data[3]} ${this.data[7]} ${this.data[11]} ${this.data[15]}]\n`;\n    }\n    constructor(){\n        /**\n     *  4x4 matrix in column major order\n     *\n     * |         |         |          |          |\n     * | ------- | ------- | -------- | -------- |\n     * | data[0] | data[4] | data[8]  | data[12] |\n     * | data[1] | data[5] | data[9]  | data[13] |\n     * | data[2] | data[6] | data[10] | data[14] |\n     * | data[3] | data[7] | data[11] | data[15] |\n     *\n     */ this.data = new Float32Array(16);\n        this._scaleX = 1;\n        this._scaleSignX = 1;\n        this._scaleY = 1;\n        this._scaleSignY = 1;\n    }\n}\n\n\nvar $989c04221556d5fb$exports = {};\n$989c04221556d5fb$exports = new URL(\"sprite.7cf94011.png\", import.meta.url).toString();\n\n\nvar $878114f89552527b$exports = {};\n$878114f89552527b$exports = new URL(\"obstacle.af1de7c7.png\", import.meta.url).toString();\n\n\nconst $543d6d2a56ed7d8d$var$canvas = document.querySelector(\"canvas\");\n// const canvas = document.createElement('canvas');\n// canvas.width = 800;\n// canvas.height = 800;\n// document.body.appendChild(canvas);\nconst $543d6d2a56ed7d8d$var$gl = $543d6d2a56ed7d8d$var$canvas.getContext(\"webgl2\", {\n    antialias: false,\n    premultipliedAlpha: false,\n    alpha: false,\n    depth: true,\n    powerPreference: \"high-performance\"\n});\nfunction $543d6d2a56ed7d8d$var$_processSourceForError(source, errorInfo) {\n    if (!source) return errorInfo;\n    const lines = source.split(\"\\n\");\n    const errorLineStart = errorInfo.search(/\\d:\\d/);\n    const errorLineEnd = errorInfo.indexOf(\" \", errorLineStart);\n    const [_, error2] = errorInfo.slice(errorLineStart, errorLineEnd).split(\":\").map((v)=>Number(v));\n    for(let i = 0; i < lines.length; i++)lines[i] = `${i + 1}: ${lines[i]}${error2 === i + 1 ? \" <----- ERROR!\" : \"\"}`;\n    return \"\\n\\nSource:\\n\" + lines.join(\"\\n\");\n}\nconst $543d6d2a56ed7d8d$var$ortho = (0, $cafce761e2c8b5f4$export$5b12bf1653c0dd85).ortho(0, $543d6d2a56ed7d8d$var$gl.canvas.width, $543d6d2a56ed7d8d$var$gl.canvas.height, 0, 400, -400);\n$543d6d2a56ed7d8d$var$gl.viewport(0, 0, $543d6d2a56ed7d8d$var$gl.canvas.width, $543d6d2a56ed7d8d$var$gl.canvas.height);\n// Clear background\n$543d6d2a56ed7d8d$var$gl.clearColor(0, 0, 0, 1.0);\n$543d6d2a56ed7d8d$var$gl.clear($543d6d2a56ed7d8d$var$gl.COLOR_BUFFER_BIT);\n// Enable alpha blending\n// https://www.realtimerendering.com/blog/gpus-prefer-premultiplication/\n$543d6d2a56ed7d8d$var$gl.enable($543d6d2a56ed7d8d$var$gl.BLEND);\n$543d6d2a56ed7d8d$var$gl.blendFunc($543d6d2a56ed7d8d$var$gl.ONE, $543d6d2a56ed7d8d$var$gl.ONE_MINUS_SRC_ALPHA);\n// gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n// gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n// gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n// create shader programs\nconst $543d6d2a56ed7d8d$var$glsl = (x)=>x[0];\nconst $543d6d2a56ed7d8d$var$particleVertex = $543d6d2a56ed7d8d$var$glsl`#version 300 es\n\n    /* From TheBookOfShaders, chapter 10. This is a slightly upscaled implementation\n    of the algorithm:\n        r = Math.cos(aReallyHugeNumber);\n    except it attempts to avoid the concentration of values around 1 and 0 by \n    multiplying by a very large irrational number and then discarding the result's\n    integer component. Acceptable results. Other deterministic pseudo-random number \n    algorithms are available (including random textures).\n    */\n    float rand2(vec2 source)\n    {\n        return fract(sin(dot(source.xy, vec2(1.9898,1.2313))) * 42758.5453123);\n    } \n\n    float ran_range(float ran, float minf, float maxf) {\n        return ran * (maxf - minf) + minf;\n    }\n\n    uniform float uRandom;\n    uniform float deltaMs;\n    uniform vec2 gravity;\n    uniform mat4 u_matrix;\n\n    uniform sampler2D obstacle;\n\n    layout(location=0) in vec2 position;\n    layout(location=1) in vec2 velocity;\n    layout(location=2) in float rotation;\n    layout(location=3) in float angularVelocity;\n    layout(location=4) in float lifeMs;\n\n    out vec2 finalPosition;\n    out vec2 finalVelocity;\n    out float finalRotation;\n    out float finalAngularVelocity;\n    out float finalLifeMs;\n    void main() {\n\n        float width = 800.;\n        float height = 800.;\n\n        if (lifeMs >= 0.) {\n            float seconds = deltaMs / 1000.0;\n            // euler integration\n            finalVelocity = velocity + gravity * seconds;\n            finalPosition = position + velocity * seconds + gravity * .5 * seconds * seconds;\n            finalRotation = rotation + angularVelocity * seconds;\n            finalAngularVelocity = angularVelocity; // todo weird artifact of re-using the same buffer layout for update/draw\n            finalLifeMs = lifeMs - deltaMs;\n\n\n            // try distance to center?\n            // if (distance(finalPosition, vec2(0.)) < .5) {\n            //     // non opaque means we collide! recalc final pos/vel\n            //     // vec2 normal = normalize(position - finalPosition); // guess the collision normal is the opposite direction\n            //     vec2 newVelocity =  velocity * -1.; //reflect(velocity, normal) * 1.1;\n            //     finalVelocity = newVelocity + gravity * seconds;\n            //     finalPosition = position + newVelocity * seconds + gravity * .5 * seconds * seconds;\n            // }\n\n            // sample obstacle mask texture to see if we collide\n            // clip space to obstacle tex coords\n            // vec2 samplePoint = ((finalPosition + 1.) / 2.);\n            vec2 samplePoint = finalPosition / vec2(width, height);\n\n            vec4 collides = texture(obstacle, samplePoint);\n            if (distance(collides, vec4(0.)) > .01) {\n                // non opaque means we collide! recalc final pos/vel\n                // vec2 normal = normalize(position - finalPosition); // guess the collision normal is the opposite direction\n                vec2 newVelocity =  velocity * -.1; // lose energy\n                finalVelocity = newVelocity + gravity * seconds;\n                finalPosition = position + newVelocity * seconds + gravity * .5 * seconds * seconds;\n            }\n\n        } else {\n            // Reset particle!\n\n            // Seed some randoms\n            float s  = float(gl_VertexID);\n            float r1 = rand2(vec2(s, uRandom));\n            float r2 = rand2(vec2(r1, uRandom));\n            float r3 = rand2(vec2(uRandom, r1 * uRandom));\n\n            finalVelocity = vec2(ran_range(r1, -200., 200.), ran_range(r2, 0., -200.));\n            finalPosition = vec2(ran_range(r2, 0., 800.), 800.);\n            finalRotation = 3.14 * 2. * r3;\n            finalAngularVelocity = 6. * r2 - 3.14;\n            finalLifeMs = 2000. * r3;\n        }\n        float perc = finalLifeMs / 2000.;\n        vec2 transformedPos = (u_matrix * vec4(finalPosition, 0., 1.)).xy;\n        gl_Position = vec4(transformedPos, 0.0, 1.0);\n        gl_PointSize = 32.;//10.;// 64.0 * perc;\n    }\n`;\nconst $543d6d2a56ed7d8d$var$particleFrag = $543d6d2a56ed7d8d$var$glsl`#version 300 es\n    precision mediump float;\n\n    uniform sampler2D graphic;\n\n    in float finalRotation;\n    in float finalLifeMs;\n    out vec4 fragColor;\n\n    void main() {\n\n        float alpha = finalLifeMs/2000.;\n\n        /** Draw texture */\n        float mid = .5;\n        float cosine = cos(finalRotation);\n        float sine = sin(finalRotation);\n        vec2 rotated = vec2(cosine * (gl_PointCoord.x - mid) + sine * (gl_PointCoord.y - mid) + mid,\n                            cosine * (gl_PointCoord.y - mid) - sine * (gl_PointCoord.x - mid) + mid);\n        vec4 color = texture(graphic, rotated);\n        fragColor = color * alpha;\n\n        /** Draw circle */\n        // float distanceFromPointCenter = distance(gl_PointCoord.xy, vec2(0.5));\n        // if (distanceFromPointCenter > .5) discard;\n        // // TODO particle colors as vertex attributes\n        // fragColor = vec4(.8, .9*alpha, .1, 1.) * alpha;\n    }\n`;\n// Init program\nconst $543d6d2a56ed7d8d$var$program = $543d6d2a56ed7d8d$var$gl.createProgram();\nconst $543d6d2a56ed7d8d$var$vertexShader = $543d6d2a56ed7d8d$var$gl.createShader($543d6d2a56ed7d8d$var$gl.VERTEX_SHADER);\n$543d6d2a56ed7d8d$var$gl.shaderSource($543d6d2a56ed7d8d$var$vertexShader, $543d6d2a56ed7d8d$var$particleVertex);\n$543d6d2a56ed7d8d$var$gl.compileShader($543d6d2a56ed7d8d$var$vertexShader);\nvar $543d6d2a56ed7d8d$var$success = $543d6d2a56ed7d8d$var$gl.getShaderParameter($543d6d2a56ed7d8d$var$vertexShader, $543d6d2a56ed7d8d$var$gl.COMPILE_STATUS);\nif (!$543d6d2a56ed7d8d$var$success) {\n    const errorInfo = $543d6d2a56ed7d8d$var$gl.getShaderInfoLog($543d6d2a56ed7d8d$var$vertexShader);\n    throw Error(`Could not compile vertex shader:\\n\\n${errorInfo}${$543d6d2a56ed7d8d$var$_processSourceForError($543d6d2a56ed7d8d$var$particleVertex, errorInfo)}`);\n}\n$543d6d2a56ed7d8d$var$gl.attachShader($543d6d2a56ed7d8d$var$program, $543d6d2a56ed7d8d$var$vertexShader);\nconst $543d6d2a56ed7d8d$var$fragmentShader = $543d6d2a56ed7d8d$var$gl.createShader($543d6d2a56ed7d8d$var$gl.FRAGMENT_SHADER);\n$543d6d2a56ed7d8d$var$gl.shaderSource($543d6d2a56ed7d8d$var$fragmentShader, $543d6d2a56ed7d8d$var$particleFrag);\n$543d6d2a56ed7d8d$var$gl.compileShader($543d6d2a56ed7d8d$var$fragmentShader);\nvar $543d6d2a56ed7d8d$var$success = $543d6d2a56ed7d8d$var$gl.getShaderParameter($543d6d2a56ed7d8d$var$fragmentShader, $543d6d2a56ed7d8d$var$gl.COMPILE_STATUS);\nif (!$543d6d2a56ed7d8d$var$success) {\n    const errorInfo = $543d6d2a56ed7d8d$var$gl.getShaderInfoLog($543d6d2a56ed7d8d$var$fragmentShader);\n    throw Error(`Could not compile frag shader:\\n\\n${errorInfo}${$543d6d2a56ed7d8d$var$_processSourceForError($543d6d2a56ed7d8d$var$particleFrag, errorInfo)}`);\n}\n$543d6d2a56ed7d8d$var$gl.attachShader($543d6d2a56ed7d8d$var$program, $543d6d2a56ed7d8d$var$fragmentShader);\n$543d6d2a56ed7d8d$var$gl.transformFeedbackVaryings($543d6d2a56ed7d8d$var$program, [\n    \"finalPosition\",\n    \"finalVelocity\",\n    \"finalRotation\",\n    \"finalAngularVelocity\",\n    \"finalLifeMs\"\n], $543d6d2a56ed7d8d$var$gl.INTERLEAVED_ATTRIBS);\n$543d6d2a56ed7d8d$var$gl.linkProgram($543d6d2a56ed7d8d$var$program);\n// Check for sadness\nif (!$543d6d2a56ed7d8d$var$gl.getProgramParameter($543d6d2a56ed7d8d$var$program, $543d6d2a56ed7d8d$var$gl.LINK_STATUS)) {\n    console.log($543d6d2a56ed7d8d$var$gl.getShaderInfoLog($543d6d2a56ed7d8d$var$vertexShader));\n    console.log($543d6d2a56ed7d8d$var$gl.getShaderInfoLog($543d6d2a56ed7d8d$var$fragmentShader));\n}\n$543d6d2a56ed7d8d$var$gl.useProgram($543d6d2a56ed7d8d$var$program);\n// Use if you have multiple transform feedback\n// const tfo = gl.createTransformFeedback()!\n// gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tfo);\n// initalize data\nconst $543d6d2a56ed7d8d$var$TwoPI = Math.PI * 2;\nconst $543d6d2a56ed7d8d$var$numParticles = 100000;\nconst $543d6d2a56ed7d8d$var$numInputFloats = 7;\nconst $543d6d2a56ed7d8d$var$particleData = new Float32Array($543d6d2a56ed7d8d$var$numParticles * $543d6d2a56ed7d8d$var$numInputFloats);\nconst $543d6d2a56ed7d8d$var$bytesPerFloat = 4;\nfor(let i = 0; i < $543d6d2a56ed7d8d$var$numParticles * $543d6d2a56ed7d8d$var$numInputFloats; i += $543d6d2a56ed7d8d$var$numInputFloats)$543d6d2a56ed7d8d$var$particleData.set([\n    Math.random() * 800,\n    Math.random() * 800,\n    // Math.random()*2-1, Math.random()*2-1, // pos in clipspace\n    Math.random() * 200 - 100,\n    Math.random() * 200 - 100,\n    Math.random() * $543d6d2a56ed7d8d$var$TwoPI,\n    Math.random() * 2.5,\n    Math.random() * 2000 // life\n], i);\nconst $543d6d2a56ed7d8d$var$getBufferContents = (buffer)=>{\n    // Consider this `sync` object as a flag. It will be dropped\n    // into WebGL's instruction pipeline. When WebGL reaches\n    // this sync object, it will set its status two one of FOUR\n    // values.\n    const sync = $543d6d2a56ed7d8d$var$gl.fenceSync($543d6d2a56ed7d8d$var$gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    const checkStatus = ()=>{\n        // Get the status\n        const status = $543d6d2a56ed7d8d$var$gl.clientWaitSync(sync, $543d6d2a56ed7d8d$var$gl.SYNC_FLUSH_COMMANDS_BIT, 0);\n        if (status === $543d6d2a56ed7d8d$var$gl.TIMEOUT_EXPIRED) {\n            console.log(\"GPU is still busy. Let's wait some more.\");\n            setTimeout(checkStatus);\n        } else if (status === $543d6d2a56ed7d8d$var$gl.WAIT_FAILED) console.error(\"Something bad happened and we won't get any response.\");\n        else {\n            // This code will be reached if the status is either\n            // CONDITION_SATISFIED or SIGNALED_ALREADY. We don't \n            // really care which status it is as long as one of\n            // these was found. So we can safely read the buffer data\n            // (assuming another draw call hasn't initiated more\n            // changes....)\n            const view = new Float32Array($543d6d2a56ed7d8d$var$numParticles * $543d6d2a56ed7d8d$var$numInputFloats);\n            $543d6d2a56ed7d8d$var$gl.bindBuffer($543d6d2a56ed7d8d$var$gl.TRANSFORM_FEEDBACK_BUFFER, buffer);\n            $543d6d2a56ed7d8d$var$gl.getBufferSubData($543d6d2a56ed7d8d$var$gl.TRANSFORM_FEEDBACK_BUFFER, 0, view);\n            $543d6d2a56ed7d8d$var$gl.bindBuffer($543d6d2a56ed7d8d$var$gl.TRANSFORM_FEEDBACK_BUFFER, null);\n            console.log(view);\n        }\n    };\n    setTimeout(checkStatus);\n};\nlet $543d6d2a56ed7d8d$var$vaos = [];\nlet $543d6d2a56ed7d8d$var$buffers = [];\nconst $543d6d2a56ed7d8d$var$particleDataBuffer1 = $543d6d2a56ed7d8d$var$gl.createBuffer();\nconst $543d6d2a56ed7d8d$var$vao1 = $543d6d2a56ed7d8d$var$gl.createVertexArray();\n$543d6d2a56ed7d8d$var$gl.bindVertexArray($543d6d2a56ed7d8d$var$vao1);\n$543d6d2a56ed7d8d$var$gl.bindBuffer($543d6d2a56ed7d8d$var$gl.ARRAY_BUFFER, $543d6d2a56ed7d8d$var$particleDataBuffer1);\n$543d6d2a56ed7d8d$var$gl.bufferData($543d6d2a56ed7d8d$var$gl.ARRAY_BUFFER, $543d6d2a56ed7d8d$var$numParticles * $543d6d2a56ed7d8d$var$numInputFloats * $543d6d2a56ed7d8d$var$bytesPerFloat, $543d6d2a56ed7d8d$var$gl.DYNAMIC_COPY);\n$543d6d2a56ed7d8d$var$gl.bufferSubData($543d6d2a56ed7d8d$var$gl.ARRAY_BUFFER, 0, $543d6d2a56ed7d8d$var$particleData);\nvar $543d6d2a56ed7d8d$var$offset = 0;\n// position\n$543d6d2a56ed7d8d$var$gl.vertexAttribPointer(0, 2, $543d6d2a56ed7d8d$var$gl.FLOAT, false, $543d6d2a56ed7d8d$var$numInputFloats * $543d6d2a56ed7d8d$var$bytesPerFloat, 0);\n$543d6d2a56ed7d8d$var$offset += $543d6d2a56ed7d8d$var$bytesPerFloat * 2;\n// velocity\n$543d6d2a56ed7d8d$var$gl.vertexAttribPointer(1, 2, $543d6d2a56ed7d8d$var$gl.FLOAT, false, $543d6d2a56ed7d8d$var$numInputFloats * $543d6d2a56ed7d8d$var$bytesPerFloat, $543d6d2a56ed7d8d$var$offset);\n$543d6d2a56ed7d8d$var$offset += $543d6d2a56ed7d8d$var$bytesPerFloat * 2;\n// rotation\n$543d6d2a56ed7d8d$var$gl.vertexAttribPointer(2, 1, $543d6d2a56ed7d8d$var$gl.FLOAT, false, $543d6d2a56ed7d8d$var$numInputFloats * $543d6d2a56ed7d8d$var$bytesPerFloat, $543d6d2a56ed7d8d$var$offset);\n$543d6d2a56ed7d8d$var$offset += $543d6d2a56ed7d8d$var$bytesPerFloat * 1;\n// angularVelocity\n$543d6d2a56ed7d8d$var$gl.vertexAttribPointer(3, 1, $543d6d2a56ed7d8d$var$gl.FLOAT, false, $543d6d2a56ed7d8d$var$numInputFloats * $543d6d2a56ed7d8d$var$bytesPerFloat, $543d6d2a56ed7d8d$var$offset);\n$543d6d2a56ed7d8d$var$offset += $543d6d2a56ed7d8d$var$bytesPerFloat * 1;\n// life\n$543d6d2a56ed7d8d$var$gl.vertexAttribPointer(4, 1, $543d6d2a56ed7d8d$var$gl.FLOAT, false, $543d6d2a56ed7d8d$var$numInputFloats * $543d6d2a56ed7d8d$var$bytesPerFloat, $543d6d2a56ed7d8d$var$offset);\n$543d6d2a56ed7d8d$var$offset += $543d6d2a56ed7d8d$var$bytesPerFloat * 1;\n// enable attributes\n$543d6d2a56ed7d8d$var$gl.enableVertexAttribArray(0);\n$543d6d2a56ed7d8d$var$gl.enableVertexAttribArray(1);\n$543d6d2a56ed7d8d$var$gl.enableVertexAttribArray(2);\n$543d6d2a56ed7d8d$var$gl.enableVertexAttribArray(3);\n$543d6d2a56ed7d8d$var$gl.enableVertexAttribArray(4);\n$543d6d2a56ed7d8d$var$vaos.push($543d6d2a56ed7d8d$var$vao1);\n$543d6d2a56ed7d8d$var$buffers.push($543d6d2a56ed7d8d$var$particleDataBuffer1);\n// Clean up\n$543d6d2a56ed7d8d$var$gl.bindVertexArray(null);\n$543d6d2a56ed7d8d$var$gl.bindBuffer($543d6d2a56ed7d8d$var$gl.ARRAY_BUFFER, null);\nconst $543d6d2a56ed7d8d$var$particleDataBuffer2 = $543d6d2a56ed7d8d$var$gl.createBuffer();\nconst $543d6d2a56ed7d8d$var$vao2 = $543d6d2a56ed7d8d$var$gl.createVertexArray();\n$543d6d2a56ed7d8d$var$gl.bindVertexArray($543d6d2a56ed7d8d$var$vao2);\n$543d6d2a56ed7d8d$var$gl.bindBuffer($543d6d2a56ed7d8d$var$gl.ARRAY_BUFFER, $543d6d2a56ed7d8d$var$particleDataBuffer2);\n$543d6d2a56ed7d8d$var$gl.bufferData($543d6d2a56ed7d8d$var$gl.ARRAY_BUFFER, $543d6d2a56ed7d8d$var$numParticles * $543d6d2a56ed7d8d$var$numInputFloats * $543d6d2a56ed7d8d$var$bytesPerFloat, $543d6d2a56ed7d8d$var$gl.DYNAMIC_COPY);\nvar $543d6d2a56ed7d8d$var$offset = 0;\n// position\n$543d6d2a56ed7d8d$var$gl.vertexAttribPointer(0, 2, $543d6d2a56ed7d8d$var$gl.FLOAT, false, $543d6d2a56ed7d8d$var$numInputFloats * $543d6d2a56ed7d8d$var$bytesPerFloat, 0);\n$543d6d2a56ed7d8d$var$offset += $543d6d2a56ed7d8d$var$bytesPerFloat * 2;\n// velocity\n$543d6d2a56ed7d8d$var$gl.vertexAttribPointer(1, 2, $543d6d2a56ed7d8d$var$gl.FLOAT, false, $543d6d2a56ed7d8d$var$numInputFloats * $543d6d2a56ed7d8d$var$bytesPerFloat, $543d6d2a56ed7d8d$var$offset);\n$543d6d2a56ed7d8d$var$offset += $543d6d2a56ed7d8d$var$bytesPerFloat * 2;\n// rotation\n$543d6d2a56ed7d8d$var$gl.vertexAttribPointer(2, 1, $543d6d2a56ed7d8d$var$gl.FLOAT, false, $543d6d2a56ed7d8d$var$numInputFloats * $543d6d2a56ed7d8d$var$bytesPerFloat, $543d6d2a56ed7d8d$var$offset);\n$543d6d2a56ed7d8d$var$offset += $543d6d2a56ed7d8d$var$bytesPerFloat * 1;\n// angularVelocity\n$543d6d2a56ed7d8d$var$gl.vertexAttribPointer(3, 1, $543d6d2a56ed7d8d$var$gl.FLOAT, false, $543d6d2a56ed7d8d$var$numInputFloats * $543d6d2a56ed7d8d$var$bytesPerFloat, $543d6d2a56ed7d8d$var$offset);\n$543d6d2a56ed7d8d$var$offset += $543d6d2a56ed7d8d$var$bytesPerFloat * 1;\n// life\n$543d6d2a56ed7d8d$var$gl.vertexAttribPointer(4, 1, $543d6d2a56ed7d8d$var$gl.FLOAT, false, $543d6d2a56ed7d8d$var$numInputFloats * $543d6d2a56ed7d8d$var$bytesPerFloat, $543d6d2a56ed7d8d$var$offset);\n$543d6d2a56ed7d8d$var$offset += $543d6d2a56ed7d8d$var$bytesPerFloat * 1;\n// enable attributes\n$543d6d2a56ed7d8d$var$gl.enableVertexAttribArray(0);\n$543d6d2a56ed7d8d$var$gl.enableVertexAttribArray(1);\n$543d6d2a56ed7d8d$var$gl.enableVertexAttribArray(2);\n$543d6d2a56ed7d8d$var$gl.enableVertexAttribArray(3);\n$543d6d2a56ed7d8d$var$gl.enableVertexAttribArray(4);\n$543d6d2a56ed7d8d$var$vaos.push($543d6d2a56ed7d8d$var$vao2);\n$543d6d2a56ed7d8d$var$buffers.push($543d6d2a56ed7d8d$var$particleDataBuffer2);\n// Clean up\n$543d6d2a56ed7d8d$var$gl.bindVertexArray(null);\n$543d6d2a56ed7d8d$var$gl.bindBuffer($543d6d2a56ed7d8d$var$gl.ARRAY_BUFFER, null);\n// uniforms\nconst $543d6d2a56ed7d8d$var$u_matrix = $543d6d2a56ed7d8d$var$gl.getUniformLocation($543d6d2a56ed7d8d$var$program, \"u_matrix\");\nconst $543d6d2a56ed7d8d$var$u_random = $543d6d2a56ed7d8d$var$gl.getUniformLocation($543d6d2a56ed7d8d$var$program, \"uRandom\");\nconst $543d6d2a56ed7d8d$var$u_deltaMs = $543d6d2a56ed7d8d$var$gl.getUniformLocation($543d6d2a56ed7d8d$var$program, \"deltaMs\");\nconst $543d6d2a56ed7d8d$var$u_gravity = $543d6d2a56ed7d8d$var$gl.getUniformLocation($543d6d2a56ed7d8d$var$program, \"gravity\");\nconst $543d6d2a56ed7d8d$var$u_graphic = $543d6d2a56ed7d8d$var$gl.getUniformLocation($543d6d2a56ed7d8d$var$program, \"graphic\");\nconst $543d6d2a56ed7d8d$var$u_obstacle = $543d6d2a56ed7d8d$var$gl.getUniformLocation($543d6d2a56ed7d8d$var$program, \"obstacle\");\nconst $543d6d2a56ed7d8d$var$spriteTex = $543d6d2a56ed7d8d$var$gl.createTexture();\n$543d6d2a56ed7d8d$var$gl.bindTexture($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$spriteTex);\n$543d6d2a56ed7d8d$var$gl.pixelStorei($543d6d2a56ed7d8d$var$gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n// gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n$543d6d2a56ed7d8d$var$gl.texParameteri($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$gl.TEXTURE_WRAP_S, $543d6d2a56ed7d8d$var$gl.CLAMP_TO_EDGE);\n$543d6d2a56ed7d8d$var$gl.texParameteri($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$gl.TEXTURE_WRAP_T, $543d6d2a56ed7d8d$var$gl.CLAMP_TO_EDGE);\n$543d6d2a56ed7d8d$var$gl.texParameteri($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$gl.TEXTURE_MIN_FILTER, $543d6d2a56ed7d8d$var$gl.NEAREST);\n$543d6d2a56ed7d8d$var$gl.texParameteri($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$gl.TEXTURE_MAG_FILTER, $543d6d2a56ed7d8d$var$gl.NEAREST);\nconst $543d6d2a56ed7d8d$var$sprite = new Image();\n$543d6d2a56ed7d8d$var$sprite.onload = ()=>{\n    $543d6d2a56ed7d8d$var$gl.activeTexture($543d6d2a56ed7d8d$var$gl.TEXTURE0);\n    $543d6d2a56ed7d8d$var$gl.bindTexture($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$spriteTex);\n    $543d6d2a56ed7d8d$var$gl.texImage2D($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, 0, $543d6d2a56ed7d8d$var$gl.RGBA, $543d6d2a56ed7d8d$var$gl.RGBA, $543d6d2a56ed7d8d$var$gl.UNSIGNED_BYTE, $543d6d2a56ed7d8d$var$sprite);\n    $543d6d2a56ed7d8d$var$gl.bindTexture($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, null);\n};\n$543d6d2a56ed7d8d$var$sprite.src = (0, (/*@__PURE__*/$parcel$interopDefault($989c04221556d5fb$exports)));\nconst $543d6d2a56ed7d8d$var$obstacleTex = $543d6d2a56ed7d8d$var$gl.createTexture();\nconst $543d6d2a56ed7d8d$var$obstacle = new Image();\n$543d6d2a56ed7d8d$var$gl.bindTexture($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$obstacleTex);\n$543d6d2a56ed7d8d$var$gl.pixelStorei($543d6d2a56ed7d8d$var$gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n// gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n$543d6d2a56ed7d8d$var$gl.texParameteri($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$gl.TEXTURE_WRAP_S, $543d6d2a56ed7d8d$var$gl.CLAMP_TO_EDGE);\n$543d6d2a56ed7d8d$var$gl.texParameteri($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$gl.TEXTURE_WRAP_T, $543d6d2a56ed7d8d$var$gl.CLAMP_TO_EDGE);\n$543d6d2a56ed7d8d$var$gl.texParameteri($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$gl.TEXTURE_MIN_FILTER, $543d6d2a56ed7d8d$var$gl.NEAREST);\n$543d6d2a56ed7d8d$var$gl.texParameteri($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$gl.TEXTURE_MAG_FILTER, $543d6d2a56ed7d8d$var$gl.NEAREST);\n$543d6d2a56ed7d8d$var$obstacle.onload = ()=>{\n    $543d6d2a56ed7d8d$var$gl.activeTexture($543d6d2a56ed7d8d$var$gl.TEXTURE0 + 1);\n    $543d6d2a56ed7d8d$var$gl.bindTexture($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$obstacleTex);\n    $543d6d2a56ed7d8d$var$gl.texImage2D($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, 0, $543d6d2a56ed7d8d$var$gl.RGBA, $543d6d2a56ed7d8d$var$gl.RGBA, $543d6d2a56ed7d8d$var$gl.UNSIGNED_BYTE, $543d6d2a56ed7d8d$var$obstacle);\n// gl.bindTexture(gl.TEXTURE_2D, null);\n};\n$543d6d2a56ed7d8d$var$obstacle.src = (0, (/*@__PURE__*/$parcel$interopDefault($878114f89552527b$exports)));\nlet $543d6d2a56ed7d8d$var$numDraw = 100;\nconst $543d6d2a56ed7d8d$var$particleNumberDisplay = document.querySelector(\"#num-particles\");\n$543d6d2a56ed7d8d$var$particleNumberDisplay.innerText = $543d6d2a56ed7d8d$var$numDraw.toString();\nconst $543d6d2a56ed7d8d$var$particleSlider = document.querySelector(\"#particles\");\n$543d6d2a56ed7d8d$var$particleSlider.value = $543d6d2a56ed7d8d$var$numDraw.toString();\n$543d6d2a56ed7d8d$var$particleSlider.addEventListener(\"change\", (evt)=>{\n    $543d6d2a56ed7d8d$var$numDraw = +evt?.target.value;\n    $543d6d2a56ed7d8d$var$particleNumberDisplay.innerText = $543d6d2a56ed7d8d$var$numDraw.toString();\n});\nlet $543d6d2a56ed7d8d$var$index = 0;\nlet $543d6d2a56ed7d8d$var$currentVao = $543d6d2a56ed7d8d$var$vaos[$543d6d2a56ed7d8d$var$index % 2];\nlet $543d6d2a56ed7d8d$var$currentBuffer = $543d6d2a56ed7d8d$var$buffers[($543d6d2a56ed7d8d$var$index + 1) % 2];\nlet $543d6d2a56ed7d8d$var$lastTime = 0;\nconst $543d6d2a56ed7d8d$var$draw = (timestamp)=>{\n    requestAnimationFrame($543d6d2a56ed7d8d$var$draw);\n    let elapsedMs = timestamp - $543d6d2a56ed7d8d$var$lastTime;\n    $543d6d2a56ed7d8d$var$lastTime = timestamp;\n    if (elapsedMs <= 0) elapsedMs = 1;\n    // console.log(elapsedMs);\n    $543d6d2a56ed7d8d$var$gl.uniformMatrix4fv($543d6d2a56ed7d8d$var$u_matrix, false, $543d6d2a56ed7d8d$var$ortho.data);\n    $543d6d2a56ed7d8d$var$gl.uniform1f($543d6d2a56ed7d8d$var$u_random, Math.random());\n    $543d6d2a56ed7d8d$var$gl.uniform1f($543d6d2a56ed7d8d$var$u_deltaMs, elapsedMs);\n    $543d6d2a56ed7d8d$var$gl.uniform2fv($543d6d2a56ed7d8d$var$u_gravity, [\n        0,\n        -100\n    ]);\n    $543d6d2a56ed7d8d$var$gl.activeTexture($543d6d2a56ed7d8d$var$gl.TEXTURE0);\n    $543d6d2a56ed7d8d$var$gl.bindTexture($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$spriteTex);\n    $543d6d2a56ed7d8d$var$gl.uniform1i($543d6d2a56ed7d8d$var$u_graphic, 0);\n    $543d6d2a56ed7d8d$var$gl.activeTexture($543d6d2a56ed7d8d$var$gl.TEXTURE0 + 1);\n    $543d6d2a56ed7d8d$var$gl.bindTexture($543d6d2a56ed7d8d$var$gl.TEXTURE_2D, $543d6d2a56ed7d8d$var$obstacleTex);\n    $543d6d2a56ed7d8d$var$gl.uniform1i($543d6d2a56ed7d8d$var$u_obstacle, 1);\n    $543d6d2a56ed7d8d$var$gl.clearColor(0, 0, 0, 1.0);\n    $543d6d2a56ed7d8d$var$gl.clear($543d6d2a56ed7d8d$var$gl.COLOR_BUFFER_BIT);\n    // Bind one buffer to ARRAY_BUFFER and the other to TFB\n    $543d6d2a56ed7d8d$var$gl.bindVertexArray($543d6d2a56ed7d8d$var$currentVao);\n    $543d6d2a56ed7d8d$var$gl.bindBufferBase($543d6d2a56ed7d8d$var$gl.TRANSFORM_FEEDBACK_BUFFER, 0, $543d6d2a56ed7d8d$var$currentBuffer);\n    // Perform transform feedback and the draw call\n    $543d6d2a56ed7d8d$var$gl.beginTransformFeedback($543d6d2a56ed7d8d$var$gl.POINTS);\n    $543d6d2a56ed7d8d$var$gl.drawArrays($543d6d2a56ed7d8d$var$gl.POINTS, 0, $543d6d2a56ed7d8d$var$numDraw);\n    $543d6d2a56ed7d8d$var$gl.endTransformFeedback();\n    // Clean up after ourselves to avoid errors.\n    $543d6d2a56ed7d8d$var$gl.bindVertexArray(null);\n    $543d6d2a56ed7d8d$var$gl.bindBufferBase($543d6d2a56ed7d8d$var$gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n    // flip flop buffers\n    $543d6d2a56ed7d8d$var$currentVao = $543d6d2a56ed7d8d$var$vaos[$543d6d2a56ed7d8d$var$index % 2];\n    $543d6d2a56ed7d8d$var$currentBuffer = $543d6d2a56ed7d8d$var$buffers[($543d6d2a56ed7d8d$var$index + 1) % 2];\n    $543d6d2a56ed7d8d$var$index = ($543d6d2a56ed7d8d$var$index + 1) % 2;\n};\n$543d6d2a56ed7d8d$var$draw(performance.now());\n\n\n//# sourceMappingURL=index.cace3297.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"lWpsB\\\",\\\"index.cace3297.js\\\",\\\"ghyAv\\\",\\\"sprite.7cf94011.png\\\",\\\"cfGOW\\\",\\\"obstacle.af1de7c7.png\\\"]\"));","import { Matrix } from \"./matrix\";\nimport spriteImage from './sprite.png'\nimport obstacleImage from './obstacle.png';\nconst canvas = document.querySelector('canvas')!;\n\n// const canvas = document.createElement('canvas');\n// canvas.width = 800;\n// canvas.height = 800;\n// document.body.appendChild(canvas);\nconst gl = canvas.getContext('webgl2',\n    {\n        antialias: false,\n        premultipliedAlpha: false,\n        alpha: false,\n        depth: true,\n        powerPreference: 'high-performance'\n    })!;\n\n\n\n\nfunction _processSourceForError(source: string, errorInfo: string) {\n    if (!source) {\n        return errorInfo;\n    }\n    const lines = source.split('\\n');\n    const errorLineStart = errorInfo.search(/\\d:\\d/);\n    const errorLineEnd = errorInfo.indexOf(' ', errorLineStart);\n    const [_, error2] = errorInfo.slice(errorLineStart, errorLineEnd).split(':').map(v => Number(v));\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = `${i + 1}: ${lines[i]}${error2 === (i + 1) ? ' <----- ERROR!' : ''}`;\n    }\n\n    return '\\n\\nSource:\\n' + lines.join('\\n');\n}\n\n\nconst ortho = Matrix.ortho(0, gl.canvas.width, gl.canvas.height, 0, 400, -400);\ngl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n// Clear background\ngl.clearColor(0, 0, 0, 1.0);\ngl.clear(gl.COLOR_BUFFER_BIT);\n\n// Enable alpha blending\n// https://www.realtimerendering.com/blog/gpus-prefer-premultiplication/\ngl.enable(gl.BLEND);\ngl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n// gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n// gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n// gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\n\n// create shader programs\nconst glsl = (x: any) => x[0];\nconst particleVertex = glsl`#version 300 es\n\n    /* From TheBookOfShaders, chapter 10. This is a slightly upscaled implementation\n    of the algorithm:\n        r = Math.cos(aReallyHugeNumber);\n    except it attempts to avoid the concentration of values around 1 and 0 by \n    multiplying by a very large irrational number and then discarding the result's\n    integer component. Acceptable results. Other deterministic pseudo-random number \n    algorithms are available (including random textures).\n    */\n    float rand2(vec2 source)\n    {\n        return fract(sin(dot(source.xy, vec2(1.9898,1.2313))) * 42758.5453123);\n    } \n\n    float ran_range(float ran, float minf, float maxf) {\n        return ran * (maxf - minf) + minf;\n    }\n\n    uniform float uRandom;\n    uniform float deltaMs;\n    uniform vec2 gravity;\n    uniform mat4 u_matrix;\n\n    uniform sampler2D obstacle;\n\n    layout(location=0) in vec2 position;\n    layout(location=1) in vec2 velocity;\n    layout(location=2) in float rotation;\n    layout(location=3) in float angularVelocity;\n    layout(location=4) in float lifeMs;\n\n    out vec2 finalPosition;\n    out vec2 finalVelocity;\n    out float finalRotation;\n    out float finalAngularVelocity;\n    out float finalLifeMs;\n    void main() {\n\n        float width = 800.;\n        float height = 800.;\n\n        if (lifeMs >= 0.) {\n            float seconds = deltaMs / 1000.0;\n            // euler integration\n            finalVelocity = velocity + gravity * seconds;\n            finalPosition = position + velocity * seconds + gravity * .5 * seconds * seconds;\n            finalRotation = rotation + angularVelocity * seconds;\n            finalAngularVelocity = angularVelocity; // todo weird artifact of re-using the same buffer layout for update/draw\n            finalLifeMs = lifeMs - deltaMs;\n\n\n            // try distance to center?\n            // if (distance(finalPosition, vec2(0.)) < .5) {\n            //     // non opaque means we collide! recalc final pos/vel\n            //     // vec2 normal = normalize(position - finalPosition); // guess the collision normal is the opposite direction\n            //     vec2 newVelocity =  velocity * -1.; //reflect(velocity, normal) * 1.1;\n            //     finalVelocity = newVelocity + gravity * seconds;\n            //     finalPosition = position + newVelocity * seconds + gravity * .5 * seconds * seconds;\n            // }\n\n            // sample obstacle mask texture to see if we collide\n            // clip space to obstacle tex coords\n            // vec2 samplePoint = ((finalPosition + 1.) / 2.);\n            vec2 samplePoint = finalPosition / vec2(width, height);\n\n            vec4 collides = texture(obstacle, samplePoint);\n            if (distance(collides, vec4(0.)) > .01) {\n                // non opaque means we collide! recalc final pos/vel\n                // vec2 normal = normalize(position - finalPosition); // guess the collision normal is the opposite direction\n                vec2 newVelocity =  velocity * -.1; // lose energy\n                finalVelocity = newVelocity + gravity * seconds;\n                finalPosition = position + newVelocity * seconds + gravity * .5 * seconds * seconds;\n            }\n\n        } else {\n            // Reset particle!\n\n            // Seed some randoms\n            float s  = float(gl_VertexID);\n            float r1 = rand2(vec2(s, uRandom));\n            float r2 = rand2(vec2(r1, uRandom));\n            float r3 = rand2(vec2(uRandom, r1 * uRandom));\n\n            finalVelocity = vec2(ran_range(r1, -200., 200.), ran_range(r2, 0., -200.));\n            finalPosition = vec2(ran_range(r2, 0., 800.), 800.);\n            finalRotation = 3.14 * 2. * r3;\n            finalAngularVelocity = 6. * r2 - 3.14;\n            finalLifeMs = 2000. * r3;\n        }\n        float perc = finalLifeMs / 2000.;\n        vec2 transformedPos = (u_matrix * vec4(finalPosition, 0., 1.)).xy;\n        gl_Position = vec4(transformedPos, 0.0, 1.0);\n        gl_PointSize = 32.;//10.;// 64.0 * perc;\n    }\n`\nconst particleFrag = glsl`#version 300 es\n    precision mediump float;\n\n    uniform sampler2D graphic;\n\n    in float finalRotation;\n    in float finalLifeMs;\n    out vec4 fragColor;\n\n    void main() {\n\n        float alpha = finalLifeMs/2000.;\n\n        /** Draw texture */\n        float mid = .5;\n        float cosine = cos(finalRotation);\n        float sine = sin(finalRotation);\n        vec2 rotated = vec2(cosine * (gl_PointCoord.x - mid) + sine * (gl_PointCoord.y - mid) + mid,\n                            cosine * (gl_PointCoord.y - mid) - sine * (gl_PointCoord.x - mid) + mid);\n        vec4 color = texture(graphic, rotated);\n        fragColor = color * alpha;\n\n        /** Draw circle */\n        // float distanceFromPointCenter = distance(gl_PointCoord.xy, vec2(0.5));\n        // if (distanceFromPointCenter > .5) discard;\n        // // TODO particle colors as vertex attributes\n        // fragColor = vec4(.8, .9*alpha, .1, 1.) * alpha;\n    }\n`\n\n// Init program\nconst program = gl.createProgram()!;\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER)!;\ngl.shaderSource(vertexShader, particleVertex);\ngl.compileShader(vertexShader);\nvar success = gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS);\nif (!success) {\n  const errorInfo = gl.getShaderInfoLog(vertexShader);\n  throw Error(`Could not compile vertex shader:\\n\\n${errorInfo}${_processSourceForError(particleVertex, errorInfo!)}`);\n}\ngl.attachShader(program, vertexShader);\n\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!;\ngl.shaderSource(fragmentShader, particleFrag);\ngl.compileShader(fragmentShader);\nvar success = gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS);\nif (!success) {\n  const errorInfo = gl.getShaderInfoLog(fragmentShader);\n  throw Error(`Could not compile frag shader:\\n\\n${errorInfo}${_processSourceForError(particleFrag, errorInfo!)}`);\n}\ngl.attachShader(program, fragmentShader);\n\ngl.transformFeedbackVaryings(program, ['finalPosition', 'finalVelocity', 'finalRotation', 'finalAngularVelocity', 'finalLifeMs'], gl.INTERLEAVED_ATTRIBS);\ngl.linkProgram(program);\n\n// Check for sadness\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    console.log(gl.getShaderInfoLog(fragmentShader));\n}\n\ngl.useProgram(program);\n\n\n// Use if you have multiple transform feedback\n// const tfo = gl.createTransformFeedback()!\n// gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tfo);\n\n// initalize data\nconst TwoPI = Math.PI * 2;\nconst numParticles = 100_000;\nconst numInputFloats = 2 + 2 + 1 + 1 + 1;\nconst particleData = new Float32Array(numParticles * numInputFloats);\nconst bytesPerFloat = 4;\nfor (let i = 0; i < numParticles * numInputFloats; i += numInputFloats) {\n    particleData.set([\n        Math.random()* 800, Math.random()*800, // pos in worldspace\n        // Math.random()*2-1, Math.random()*2-1, // pos in clipspace\n        Math.random() * 200 - 100, Math.random() * 200 - 100,                        // velocity\n        Math.random() * TwoPI,                            // rotation\n        Math.random() * 2.5,                             // angular velocity\n        Math.random()*2000 // life\n    ], i);\n}\n\nconst getBufferContents = (buffer: WebGLBuffer) => {\n    // Consider this `sync` object as a flag. It will be dropped\n    // into WebGL's instruction pipeline. When WebGL reaches\n    // this sync object, it will set its status two one of FOUR\n    // values.\n    const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0)!;\n\n    const checkStatus = () => {\n        // Get the status\n        const status = gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0);\n\n        if (status === gl.TIMEOUT_EXPIRED) {\n            console.log('GPU is still busy. Let\\'s wait some more.');\n            setTimeout(checkStatus);\n        } else if (status === gl.WAIT_FAILED) {\n            console.error('Something bad happened and we won\\'t get any response.');\n        } else  {\n            // This code will be reached if the status is either\n            // CONDITION_SATISFIED or SIGNALED_ALREADY. We don't \n            // really care which status it is as long as one of\n            // these was found. So we can safely read the buffer data\n            // (assuming another draw call hasn't initiated more\n            // changes....)\n            const view = new Float32Array(numParticles * numInputFloats);\n            gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, buffer);\n            gl.getBufferSubData(gl.TRANSFORM_FEEDBACK_BUFFER, 0, view);\n            gl.bindBuffer(gl.TRANSFORM_FEEDBACK_BUFFER, null);\n            console.log(view);\n        }\n    };\n\n    setTimeout(checkStatus);\n};\n\n\nlet vaos: WebGLVertexArrayObject[] = [];\nlet buffers: WebGLBuffer[] = [];\n\nconst particleDataBuffer1 = gl.createBuffer()!;\nconst vao1 = gl.createVertexArray()!;\ngl.bindVertexArray(vao1);\ngl.bindBuffer(gl.ARRAY_BUFFER, particleDataBuffer1);\ngl.bufferData(gl.ARRAY_BUFFER, numParticles * numInputFloats * bytesPerFloat, gl.DYNAMIC_COPY);\ngl.bufferSubData(gl.ARRAY_BUFFER, 0, particleData);\nvar offset = 0;\n// position\ngl.vertexAttribPointer(0, 2, gl.FLOAT, false, numInputFloats * bytesPerFloat, 0);\noffset += bytesPerFloat * 2;\n// velocity\ngl.vertexAttribPointer(1, 2, gl.FLOAT, false, numInputFloats * bytesPerFloat, offset);\noffset += bytesPerFloat * 2\n// rotation\ngl.vertexAttribPointer(2, 1, gl.FLOAT, false, numInputFloats * bytesPerFloat, offset);\noffset += bytesPerFloat * 1\n// angularVelocity\ngl.vertexAttribPointer(3, 1, gl.FLOAT, false, numInputFloats * bytesPerFloat, offset);\noffset += bytesPerFloat * 1\n// life\ngl.vertexAttribPointer(4, 1, gl.FLOAT, false, numInputFloats * bytesPerFloat, offset);\noffset += bytesPerFloat * 1\n\n// enable attributes\ngl.enableVertexAttribArray(0);\ngl.enableVertexAttribArray(1);\ngl.enableVertexAttribArray(2);\ngl.enableVertexAttribArray(3);\ngl.enableVertexAttribArray(4);\n\nvaos.push(vao1);\nbuffers.push(particleDataBuffer1);\n// Clean up\ngl.bindVertexArray(null);\ngl.bindBuffer(gl.ARRAY_BUFFER, null);\n\nconst particleDataBuffer2 = gl.createBuffer()!;\nconst vao2 = gl.createVertexArray()!;\ngl.bindVertexArray(vao2);\ngl.bindBuffer(gl.ARRAY_BUFFER, particleDataBuffer2);\ngl.bufferData(gl.ARRAY_BUFFER, numParticles * numInputFloats * bytesPerFloat, gl.DYNAMIC_COPY);\nvar offset = 0;\n// position\ngl.vertexAttribPointer(0, 2, gl.FLOAT, false, numInputFloats * bytesPerFloat, 0);\noffset += bytesPerFloat * 2;\n// velocity\ngl.vertexAttribPointer(1, 2, gl.FLOAT, false, numInputFloats * bytesPerFloat, offset);\noffset += bytesPerFloat * 2\n// rotation\ngl.vertexAttribPointer(2, 1, gl.FLOAT, false, numInputFloats * bytesPerFloat, offset);\noffset += bytesPerFloat * 1\n// angularVelocity\ngl.vertexAttribPointer(3, 1, gl.FLOAT, false, numInputFloats * bytesPerFloat, offset);\noffset += bytesPerFloat * 1\n// life\ngl.vertexAttribPointer(4, 1, gl.FLOAT, false, numInputFloats * bytesPerFloat, offset);\noffset += bytesPerFloat * 1\n\n// enable attributes\ngl.enableVertexAttribArray(0);\ngl.enableVertexAttribArray(1);\ngl.enableVertexAttribArray(2);\ngl.enableVertexAttribArray(3);\ngl.enableVertexAttribArray(4);\n\nvaos.push(vao2);\nbuffers.push(particleDataBuffer2);\n\n// Clean up\ngl.bindVertexArray(null);\ngl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n\n// uniforms\nconst u_matrix = gl.getUniformLocation(program, 'u_matrix');\nconst u_random = gl.getUniformLocation(program, 'uRandom');\nconst u_deltaMs = gl.getUniformLocation(program, 'deltaMs');\nconst u_gravity = gl.getUniformLocation(program, 'gravity');\nconst u_graphic = gl.getUniformLocation(program, 'graphic');\nconst u_obstacle = gl.getUniformLocation(program, 'obstacle');\n\nconst spriteTex = gl.createTexture();\ngl.bindTexture(gl.TEXTURE_2D, spriteTex);\ngl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n// gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\nconst sprite = new Image();\nsprite.onload = () => {\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, spriteTex);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, sprite);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n}\nsprite.src = spriteImage;\n\nconst obstacleTex = gl.createTexture();\nconst obstacle = new Image();\ngl.bindTexture(gl.TEXTURE_2D, obstacleTex);\ngl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n// gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\ngl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\nobstacle.onload = () => {\n    gl.activeTexture(gl.TEXTURE0 + 1);\n    gl.bindTexture(gl.TEXTURE_2D, obstacleTex);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, obstacle);\n    // gl.bindTexture(gl.TEXTURE_2D, null);\n}\nobstacle.src = obstacleImage;\n\nlet numDraw = 100;\nconst particleNumberDisplay = document.querySelector('#num-particles') as HTMLDivElement;\nparticleNumberDisplay.innerText = numDraw.toString();\n\nconst particleSlider = document.querySelector('#particles') as HTMLInputElement;\nparticleSlider.value = numDraw.toString();\nparticleSlider.addEventListener('change', evt => {\n    numDraw = +(evt?.target as HTMLInputElement)!.value;\n    particleNumberDisplay.innerText = numDraw.toString();\n});\n\n\nlet index = 0;\nlet currentVao = vaos[(index) % 2];\nlet currentBuffer = buffers[(index + 1) % 2];\nlet lastTime = 0;\nconst draw = (timestamp: number) => {\n    requestAnimationFrame(draw);\n\n    let elapsedMs = timestamp - lastTime;\n    lastTime = timestamp;\n    if (elapsedMs <= 0) {\n        elapsedMs = 1;\n    }\n    // console.log(elapsedMs);\n    gl.uniformMatrix4fv(u_matrix, false, ortho.data);\n    gl.uniform1f(u_random, Math.random());\n    gl.uniform1f(u_deltaMs, elapsedMs);\n    gl.uniform2fv(u_gravity, [0, -100]);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, spriteTex);\n    gl.uniform1i(u_graphic, 0);\n\n    gl.activeTexture(gl.TEXTURE0 + 1);\n    gl.bindTexture(gl.TEXTURE_2D, obstacleTex);\n    gl.uniform1i(u_obstacle, 1);\n\n    gl.clearColor(0, 0, 0, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    // Bind one buffer to ARRAY_BUFFER and the other to TFB\n    gl.bindVertexArray(currentVao);\n    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, currentBuffer);\n\n    // Perform transform feedback and the draw call\n    gl.beginTransformFeedback(gl.POINTS);\n    gl.drawArrays(gl.POINTS, 0, numDraw);\n    gl.endTransformFeedback();\n\n    // Clean up after ourselves to avoid errors.\n    gl.bindVertexArray(null);\n    gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n\n    // flip flop buffers\n    currentVao = vaos[(index) % 2];\n    currentBuffer = buffers[(index + 1) % 2];\n    index = (index + 1) % 2;\n}\ndraw(performance.now());","import { Vector, vec } from './vector';\n\nconst TwoPI = Math.PI * 2;\n/**\n * Convert an angle to be the equivalent in the range [0, 2PI]\n */\nexport function canonicalizeAngle(angle: number): number {\n    let tmpAngle = angle;\n    if (angle > TwoPI) {\n      while (tmpAngle > TwoPI) {\n        tmpAngle -= TwoPI;\n      }\n    }\n  \n    if (angle < 0) {\n      while (tmpAngle < 0) {\n        tmpAngle += TwoPI;\n      }\n    }\n    return tmpAngle;\n  }\n\nexport function sign(val: number): number {\n    if (val === 0) {\n        return 0;\n    }\n    return val < 0 ? -1 : 1;\n};\n\nexport enum MatrixLocations {\n    X = 12,\n    Y = 13\n}\n\n/**\n * Excalibur Matrix helper for 4x4 matrices\n *\n * Useful for webgl 4x4 matrices\n */\nexport class Matrix {\n    /**\n     *  4x4 matrix in column major order\n     *\n     * |         |         |          |          |\n     * | ------- | ------- | -------- | -------- |\n     * | data[0] | data[4] | data[8]  | data[12] |\n     * | data[1] | data[5] | data[9]  | data[13] |\n     * | data[2] | data[6] | data[10] | data[14] |\n     * | data[3] | data[7] | data[11] | data[15] |\n     *\n     */\n    public data: Float32Array = new Float32Array(16);\n\n    /**\n     * Creates an orthographic (flat non-perspective) projection\n     * https://en.wikipedia.org/wiki/Orthographic_projection\n     * @param left\n     * @param right\n     * @param bottom\n     * @param top\n     * @param near\n     * @param far\n     */\n    public static ortho(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix {\n        const mat = new Matrix();\n        mat.data[0] = 2 / (right - left);\n        mat.data[1] = 0;\n        mat.data[2] = 0;\n        mat.data[3] = 0;\n\n        mat.data[4] = 0;\n        mat.data[5] = 2 / (top - bottom);\n        mat.data[6] = 0;\n        mat.data[7] = 0;\n\n        mat.data[8] = 0;\n        mat.data[9] = 0;\n        mat.data[10] = -2 / (far - near);\n        mat.data[11] = 0;\n\n        mat.data[12] = -(right + left) / (right - left);\n        mat.data[13] = -(top + bottom) / (top - bottom);\n        mat.data[14] = -(far + near) / (far - near);\n        mat.data[15] = 1;\n        return mat;\n    }\n\n    /**\n     * Creates a new Matrix with the same data as the current 4x4\n     */\n    public clone(dest?: Matrix): Matrix {\n        const mat = dest || new Matrix();\n        mat.data[0] = this.data[0];\n        mat.data[1] = this.data[1];\n        mat.data[2] = this.data[2];\n        mat.data[3] = this.data[3];\n\n        mat.data[4] = this.data[4];\n        mat.data[5] = this.data[5];\n        mat.data[6] = this.data[6];\n        mat.data[7] = this.data[7];\n\n        mat.data[8] = this.data[8];\n        mat.data[9] = this.data[9];\n        mat.data[10] = this.data[10];\n        mat.data[11] = this.data[11];\n\n        mat.data[12] = this.data[12];\n        mat.data[13] = this.data[13];\n        mat.data[14] = this.data[14];\n        mat.data[15] = this.data[15];\n        return mat;\n    }\n\n    /**\n     * Converts the current matrix into a DOMMatrix\n     *\n     * This is useful when working with the browser Canvas context\n     * @returns {DOMMatrix} DOMMatrix\n     */\n    public toDOMMatrix(): DOMMatrix {\n        return new DOMMatrix([...this.data]);\n    }\n\n    public static fromFloat32Array(data: Float32Array) {\n        const matrix = new Matrix();\n        matrix.data = data;\n        return matrix;\n    }\n\n    /**\n     * Creates a new identity matrix (a matrix that when applied does nothing)\n     */\n    public static identity(): Matrix {\n        const mat = new Matrix();\n        mat.data[0] = 1;\n        mat.data[1] = 0;\n        mat.data[2] = 0;\n        mat.data[3] = 0;\n\n        mat.data[4] = 0;\n        mat.data[5] = 1;\n        mat.data[6] = 0;\n        mat.data[7] = 0;\n\n        mat.data[8] = 0;\n        mat.data[9] = 0;\n        mat.data[10] = 1;\n        mat.data[11] = 0;\n\n        mat.data[12] = 0;\n        mat.data[13] = 0;\n        mat.data[14] = 0;\n        mat.data[15] = 1;\n        return mat;\n    }\n\n    /**\n     * Resets the current matrix to the identity matrix, mutating it\n     * @returns {Matrix} Current matrix as identity\n     */\n    public reset(): Matrix {\n        const mat = this;\n        mat.data[0] = 1;\n        mat.data[1] = 0;\n        mat.data[2] = 0;\n        mat.data[3] = 0;\n\n        mat.data[4] = 0;\n        mat.data[5] = 1;\n        mat.data[6] = 0;\n        mat.data[7] = 0;\n\n        mat.data[8] = 0;\n        mat.data[9] = 0;\n        mat.data[10] = 1;\n        mat.data[11] = 0;\n\n        mat.data[12] = 0;\n        mat.data[13] = 0;\n        mat.data[14] = 0;\n        mat.data[15] = 1;\n        return mat;\n    }\n\n    /**\n     * Creates a brand new translation matrix at the specified 3d point\n     * @param x\n     * @param y\n     */\n    public static translation(x: number, y: number): Matrix {\n        const mat = Matrix.identity();\n        mat.data[12] = x;\n        mat.data[13] = y;\n        return mat;\n    }\n\n    /**\n     * Creates a brand new scaling matrix with the specified scaling factor\n     * @param sx\n     * @param sy\n     */\n    public static scale(sx: number, sy: number): Matrix {\n        const mat = Matrix.identity();\n        mat.data[0] = sx;\n        mat.data[5] = sy;\n        mat.data[10] = 1;\n        mat.data[15] = 1;\n        return mat;\n    }\n\n    /**\n     * Creates a brand new rotation matrix with the specified angle\n     * @param angleRadians\n     */\n    public static rotation(angleRadians: number): Matrix {\n        const mat = Matrix.identity();\n        mat.data[0] = Math.cos(angleRadians);\n        mat.data[4] = -Math.sin(angleRadians);\n        mat.data[1] = Math.sin(angleRadians);\n        mat.data[5] = Math.cos(angleRadians);\n        return mat;\n    }\n\n    /**\n     * Multiply the current matrix by a vector producing a new vector\n     * @param vector\n     * @param dest\n     */\n    multiply(vector: Vector, dest?: Vector): Vector;\n    /**\n     * Multiply the current matrix by another matrix producing a new matrix\n     * @param matrix\n     * @param dest\n     */\n    multiply(matrix: Matrix, dest?: Matrix): Matrix;\n    multiply(vectorOrMatrix: Vector | Matrix, dest?: Vector | Matrix): Vector | Matrix {\n        if (vectorOrMatrix instanceof Vector) {\n            const result = (dest as Vector) || new Vector(0, 0);\n            const vector = vectorOrMatrix;\n            // these shenanigans are to allow dest and vector to be the same instance\n            const resultX = vector.x * this.data[0] + vector.y * this.data[4] + this.data[12];\n            const resultY = vector.x * this.data[1] + vector.y * this.data[5] + this.data[13];\n\n            result.x = resultX;\n            result.y = resultY;\n            return result;\n        } else {\n            const result = (dest as Matrix) || new Matrix();\n            const other = vectorOrMatrix;\n            const a11 = this.data[0];\n            const a21 = this.data[1];\n            const a31 = this.data[2];\n            const a41 = this.data[3];\n\n            const a12 = this.data[4];\n            const a22 = this.data[5];\n            const a32 = this.data[6];\n            const a42 = this.data[7];\n\n            const a13 = this.data[8];\n            const a23 = this.data[9];\n            const a33 = this.data[10];\n            const a43 = this.data[11];\n\n            const a14 = this.data[12];\n            const a24 = this.data[13];\n            const a34 = this.data[14];\n            const a44 = this.data[15];\n\n            const b11 = other.data[0];\n            const b21 = other.data[1];\n            const b31 = other.data[2];\n            const b41 = other.data[3];\n\n            const b12 = other.data[4];\n            const b22 = other.data[5];\n            const b32 = other.data[6];\n            const b42 = other.data[7];\n\n            const b13 = other.data[8];\n            const b23 = other.data[9];\n            const b33 = other.data[10];\n            const b43 = other.data[11];\n\n            const b14 = other.data[12];\n            const b24 = other.data[13];\n            const b34 = other.data[14];\n            const b44 = other.data[15];\n\n            result.data[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n            result.data[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n            result.data[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n            result.data[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\n            result.data[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n            result.data[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n            result.data[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n            result.data[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\n            result.data[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n            result.data[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n            result.data[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n            result.data[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\n            result.data[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n            result.data[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n            result.data[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n            result.data[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n            const s = this.getScale();\n            result._scaleSignX = sign(s.x) * sign(result._scaleSignX);\n            result._scaleSignY = sign(s.y) * sign(result._scaleSignY);\n\n            return result;\n        }\n    }\n\n\n    /**\n     * Applies translation to the current matrix mutating it\n     * @param x\n     * @param y\n     */\n    translate(x: number, y: number) {\n        const a11 = this.data[0];\n        const a21 = this.data[1];\n        const a31 = this.data[2];\n        const a41 = this.data[3];\n\n        const a12 = this.data[4];\n        const a22 = this.data[5];\n        const a32 = this.data[6];\n        const a42 = this.data[7];\n\n        const a13 = this.data[8];\n        const a23 = this.data[9];\n        const a33 = this.data[10];\n        const a43 = this.data[11];\n\n        const a14 = this.data[12];\n        const a24 = this.data[13];\n        const a34 = this.data[14];\n        const a44 = this.data[15];\n\n        // Doesn't change z\n        const z = 0;\n        const w = 1;\n        this.data[12] = a11 * x + a12 * y + a13 * z + a14 * w;\n        this.data[13] = a21 * x + a22 * y + a23 * z + a24 * w;\n        this.data[14] = a31 * x + a32 * y + a33 * z + a34 * w;\n        this.data[15] = a41 * x + a42 * y + a43 * z + a44 * w;\n\n        return this;\n    }\n\n    public setPosition(x: number, y: number) {\n        this.data[12] = x;\n        this.data[13] = y;\n    }\n\n    public getPosition(): Vector {\n        return vec(this.data[12], this.data[13]);\n    }\n\n    /**\n     * Applies rotation to the current matrix mutating it\n     * @param angle in Radians\n     */\n    rotate(angle: number) {\n        const a11 = this.data[0];\n        const a21 = this.data[1];\n        const a31 = this.data[2];\n        const a41 = this.data[3];\n\n        const a12 = this.data[4];\n        const a22 = this.data[5];\n        const a32 = this.data[6];\n        const a42 = this.data[7];\n\n        const sine = Math.sin(angle);\n        const cosine = Math.cos(angle);\n\n        this.data[0] = cosine * a11 + sine * a12;\n        this.data[1] = cosine * a21 + sine * a22;\n        this.data[2] = cosine * a31 + sine * a32;\n        this.data[3] = cosine * a41 + sine * a42;\n\n        this.data[4] = cosine * a12 - sine * a11;\n        this.data[5] = cosine * a22 - sine * a21;\n        this.data[6] = cosine * a32 - sine * a31;\n        this.data[7] = cosine * a42 - sine * a41;\n\n        return this;\n    }\n\n    /**\n     * Applies scaling to the current matrix mutating it\n     * @param x\n     * @param y\n     */\n    scale(x: number, y: number) {\n        const a11 = this.data[0];\n        const a21 = this.data[1];\n        const a31 = this.data[2];\n        const a41 = this.data[3];\n\n        const a12 = this.data[4];\n        const a22 = this.data[5];\n        const a32 = this.data[6];\n        const a42 = this.data[7];\n\n        this.data[0] = a11 * x;\n        this.data[1] = a21 * x;\n        this.data[2] = a31 * x;\n        this.data[3] = a41 * x;\n\n        this.data[4] = a12 * y;\n        this.data[5] = a22 * y;\n        this.data[6] = a32 * y;\n        this.data[7] = a42 * y;\n\n        return this;\n    }\n\n    public setRotation(angle: number) {\n        const currentScale = this.getScale();\n        const sine = Math.sin(angle);\n        const cosine = Math.cos(angle);\n\n        this.data[0] = cosine * currentScale.x;\n        this.data[1] = sine * currentScale.y;\n        this.data[4] = -sine * currentScale.x;\n        this.data[5] = cosine * currentScale.y;\n    }\n\n    public getRotation(): number {\n        const angle = Math.atan2(this.data[1] / this.getScaleY(), this.data[0] / this.getScaleX());\n        return canonicalizeAngle(angle);\n    }\n\n    public getScaleX(): number {\n        // absolute scale of the matrix (we lose sign so need to add it back)\n        const xscale = vec(this.data[0], this.data[4]).size;\n        return this._scaleSignX * xscale;\n    }\n\n    public getScaleY(): number {\n        // absolute scale of the matrix (we lose sign so need to add it back)\n        const yscale = vec(this.data[1], this.data[5]).size;\n        return this._scaleSignY * yscale;\n    }\n\n    /**\n     * Get the scale of the matrix\n     */\n    public getScale(): Vector {\n        return vec(this.getScaleX(), this.getScaleY());\n    }\n\n    private _scaleX = 1;\n    private _scaleSignX = 1;\n    public setScaleX(val: number) {\n        if (this._scaleX === val) {\n            return;\n        }\n\n        this._scaleSignX = sign(val);\n        // negative scale acts like a 180 rotation, so flip\n        const xscale = vec(this.data[0] * this._scaleSignX, this.data[4] * this._scaleSignX).normalize();\n        this.data[0] = xscale.x * val;\n        this.data[4] = xscale.y * val;\n        this._scaleX = val;\n    }\n\n    private _scaleY = 1;\n    private _scaleSignY = 1;\n    public setScaleY(val: number) {\n        if (this._scaleY === val) {\n            return;\n        }\n        this._scaleSignY = sign(val);\n        // negative scale acts like a 180 rotation, so flip\n        const yscale = vec(this.data[1] * this._scaleSignY, this.data[5] * this._scaleSignY).normalize();\n        this.data[1] = yscale.x * val;\n        this.data[5] = yscale.y * val;\n        this._scaleY = val;\n    }\n\n    public setScale(scale: Vector) {\n        this.setScaleX(scale.x);\n        this.setScaleY(scale.y);\n    }\n\n    /**\n     * Determinant of the upper left 2x2 matrix\n     */\n    public getBasisDeterminant() {\n        return this.data[0] * this.data[5] - this.data[1] * this.data[4];\n    }\n\n    /**\n     * Return the affine inverse, optionally store it in a target matrix.\n     *\n     * It's recommended you call .reset() the target unless you know what you're doing\n     * @param target\n     */\n    public getAffineInverse(target?: Matrix): Matrix {\n        // See http://negativeprobability.blogspot.com/2011/11/affine-transformations-and-their.html\n        // See https://www.mathsisfun.com/algebra/matrix-inverse.html\n        // Since we are actually only doing 2D transformations we can use this hack\n        // We don't actually use the 3rd or 4th dimension\n\n        const det = this.getBasisDeterminant();\n        const inverseDet = 1 / det; // todo zero check\n        const a = this.data[0];\n        const b = this.data[4];\n        const c = this.data[1];\n        const d = this.data[5];\n\n        const m = target || Matrix.identity();\n        // inverts rotation and scale\n        m.data[0] = d * inverseDet;\n        m.data[1] = -c * inverseDet;\n        m.data[4] = -b * inverseDet;\n        m.data[5] = a * inverseDet;\n\n        const tx = this.data[12];\n        const ty = this.data[13];\n        // invert translation\n        // transform translation into the matrix basis created by rot/scale\n        m.data[12] = -(tx * m.data[0] + ty * m.data[4]);\n        m.data[13] = -(tx * m.data[1] + ty * m.data[5]);\n\n        return m;\n    }\n\n    public isIdentity(): boolean {\n        return (\n            this.data[0] === 1 &&\n            this.data[1] === 0 &&\n            this.data[2] === 0 &&\n            this.data[3] === 0 &&\n            this.data[4] === 0 &&\n            this.data[5] === 1 &&\n            this.data[6] === 0 &&\n            this.data[7] === 0 &&\n            this.data[8] === 0 &&\n            this.data[9] === 0 &&\n            this.data[10] === 1 &&\n            this.data[11] === 0 &&\n            this.data[12] === 0 &&\n            this.data[13] === 0 &&\n            this.data[14] === 0 &&\n            this.data[15] === 1\n        );\n    }\n\n    public toString() {\n        return `\n[${this.data[0]} ${this.data[4]} ${this.data[8]} ${this.data[12]}]\n[${this.data[1]} ${this.data[5]} ${this.data[9]} ${this.data[13]}]\n[${this.data[2]} ${this.data[6]} ${this.data[10]} ${this.data[14]}]\n[${this.data[3]} ${this.data[7]} ${this.data[11]} ${this.data[15]}]\n`;\n    }\n}\n","/**\n * A 2D vector on a plane.\n */\n\nexport class Vector {\n  /**\n   * A (0, 0) vector\n   */\n  public static get Zero() {\n    return new Vector(0, 0);\n  }\n\n  /**\n   * A (1, 1) vector\n   */\n  public static get One() {\n    return new Vector(1, 1);\n  }\n\n  /**\n   * A (0.5, 0.5) vector\n   */\n  public static get Half() {\n    return new Vector(0.5, 0.5);\n  }\n\n  /**\n   * A unit vector pointing up (0, -1)\n   */\n  public static get Up() {\n    return new Vector(0, -1);\n  }\n\n  /**\n   * A unit vector pointing down (0, 1)\n   */\n  public static get Down() {\n    return new Vector(0, 1);\n  }\n\n  /**\n   * A unit vector pointing left (-1, 0)\n   */\n  public static get Left() {\n    return new Vector(-1, 0);\n  }\n  /**\n   * A unit vector pointing right (1, 0)\n   */\n  public static get Right() {\n    return new Vector(1, 0);\n  }\n\n  /**\n   * Returns a vector of unit length in the direction of the specified angle in Radians.\n   * @param angle The angle to generate the vector\n   */\n  public static fromAngle(angle: number) {\n    return new Vector(Math.cos(angle), Math.sin(angle));\n  }\n\n  /**\n   * Checks if vector is not null, undefined, or if any of its components are NaN or Infinity.\n   */\n  public static isValid(vec: Vector) {\n    if (vec === null || vec === undefined) {\n      return false;\n    }\n    if (isNaN(vec.x) || isNaN(vec.y)) {\n      return false;\n    }\n\n    if (vec.x === Infinity || vec.y === Infinity || vec.x === -Infinity || vec.y === -Infinity) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Calculates distance between two Vectors\n   * @param vec1\n   * @param vec2\n   */\n  public static distance(vec1: Vector, vec2: Vector) {\n    return Math.sqrt(Math.pow(vec1.x - vec2.x, 2) + Math.pow(vec1.y - vec2.y, 2));\n  }\n\n  public static min(vec1: Vector, vec2: Vector) {\n    return new Vector(Math.min(vec1.x, vec2.x), Math.min(vec1.y, vec2.y));\n  }\n\n  public static max(vec1: Vector, vec2: Vector) {\n    return new Vector(Math.max(vec1.x, vec2.x), Math.max(vec1.y, vec2.y));\n  }\n\n  /**\n   * @param x  X component of the Vector\n   * @param y  Y component of the Vector\n   */\n  constructor(x: number, y: number) {\n    this._x = x;\n    this._y = y;\n  }\n\n  protected _x = 0;\n  /**\n   * Get the x component of the vector\n   */\n  public get x(): number {\n    return this._x;\n  }\n\n  /**\n   * Set the x component, THIS MUTATES the current vector. It is usually better to create a new vector.\n   * @warning **Be very careful setting components on shared vectors, mutating shared vectors can cause hard to find bugs**\n   */\n  public set x(val: number) {\n    this._x = val;\n  }\n\n  protected _y = 0;\n  /**\n   * Get the y component of the vector\n   */\n  public get y(): number {\n    return this._y;\n  }\n\n  /**\n   * Set the y component, THIS MUTATES the current vector. It is usually better to create a new vector.\n   * @warning **Be very careful setting components on shared vectors, mutating shared vectors can cause hard to find bugs**\n   */\n  public set y(val: number) {\n    this._y = val;\n  }\n\n  /**\n   * Sets the x and y components at once, THIS MUTATES the current vector. It is usually better to create a new vector.\n   * @warning **Be very careful using this, mutating vectors can cause hard to find bugs**\n   */\n  setTo(x: number, y: number) {\n    (this.x as number) = x;\n    (this.y as number) = y;\n  }\n\n  /**\n   * Compares this point against another and tests for equality\n   * @param vector The other point to compare to\n   * @param tolerance Amount of euclidean distance off we are willing to tolerate\n   */\n  public equals(vector: Vector, tolerance: number = 0.001): boolean {\n    return Math.abs(this.x - vector.x) <= tolerance && Math.abs(this.y - vector.y) <= tolerance;\n  }\n\n  /**\n   * The distance to another vector. If no other Vector is specified, this will return the [[magnitude]].\n   * @param v  The other vector. Leave blank to use origin vector.\n   */\n  public distance(v?: Vector): number {\n    if (!v) {\n      return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n    const deltaX = this.x - v.x;\n    const deltaY = this.y - v.y;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  }\n\n  public squareDistance(v?: Vector): number {\n    if (!v) {\n      v = Vector.Zero;\n    }\n    const deltaX = this.x - v.x;\n    const deltaY = this.y - v.y;\n    return deltaX * deltaX + deltaY * deltaY;\n  }\n\n  /**\n   * The size (magnitude) of the Vector\n   */\n  public get size(): number {\n    return this.distance();\n  }\n\n  /**\n   * Setting the size mutates the current vector\n   * @warning Can be used to set the size of the vector, **be very careful using this, mutating vectors can cause hard to find bugs**\n   */\n  public set size(newLength: number) {\n    const v = this.normalize().scale(newLength);\n    this.setTo(v.x, v.y);\n  }\n\n  /**\n   * Normalizes a vector to have a magnitude of 1.\n   */\n  public normalize(): Vector {\n    const d = this.distance();\n    if (d > 0) {\n      return new Vector(this.x / d, this.y / d);\n    } else {\n      return new Vector(0, 1);\n    }\n  }\n\n  /**\n   * Returns the average (midpoint) between the current point and the specified\n   */\n  public average(vec: Vector): Vector {\n    return this.add(vec).scale(0.5);\n  }\n\n  /**\n   * Scales a vector's by a factor of size\n   * @param size  The factor to scale the magnitude by\n   * @param dest  Optionally provide a destination vector for the result\n   */\n  public scale(scale: Vector, dest?: Vector): Vector;\n  public scale(size: number, dest?: Vector): Vector;\n  public scale(sizeOrScale: number | Vector, dest?: Vector): Vector {\n    const result = dest || new Vector(0, 0);\n    if (sizeOrScale instanceof Vector) {\n      result.x = this.x * sizeOrScale.x;\n      result.y = this.y * sizeOrScale.y;\n    } else {\n      result.x = this.x * sizeOrScale;\n      result.y = this.y * sizeOrScale;\n    }\n    return result;\n  }\n\n  /**\n   * Adds one vector to another\n   * @param v The vector to add\n   * @param dest Optionally copy the result into a provided vector\n   */\n  public add(v: Vector, dest?: Vector): Vector {\n    if (dest) {\n      dest.x = this.x + v.x;\n      dest.y = this.y + v.y;\n      return dest;\n    }\n    return new Vector(this.x + v.x, this.y + v.y);\n  }\n\n  /**\n   * Subtracts a vector from another, if you subtract vector `B.sub(A)` the resulting vector points from A -> B\n   * @param v The vector to subtract\n   */\n  public sub(v: Vector): Vector {\n    return new Vector(this.x - v.x, this.y - v.y);\n  }\n\n  /**\n   * Adds one vector to this one modifying the original\n   * @param v The vector to add\n   * @warning Be very careful using this, mutating vectors can cause hard to find bugs\n   */\n  public addEqual(v: Vector): Vector {\n    this.setTo(this.x + v.x, this.y + v.y);\n    return this;\n  }\n\n  /**\n   * Subtracts a vector from this one modifying the original\n   * @param v The vector to subtract\n   * @warning Be very careful using this, mutating vectors can cause hard to find bugs\n   */\n  public subEqual(v: Vector): Vector {\n    this.setTo(this.x - v.x, this.y - v.y);\n    return this;\n  }\n\n  /**\n   * Scales this vector by a factor of size and modifies the original\n   * @warning Be very careful using this, mutating vectors can cause hard to find bugs\n   */\n  public scaleEqual(size: number): Vector {\n    this.setTo(this.x * size, this.y * size);\n    return this;\n  }\n\n  /**\n   * Performs a dot product with another vector\n   * @param v  The vector to dot\n   */\n  public dot(v: Vector): number {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  /**\n   * Performs a 2D cross product with scalar. 2D cross products with a scalar return a vector.\n   * @param v  The scalar to cross\n   */\n  public cross(v: number): Vector;\n  /**\n   * Performs a 2D cross product with another vector. 2D cross products return a scalar value not a vector.\n   * @param v  The vector to cross\n   */\n  public cross(v: Vector): number;\n  public cross(v: any): any {\n    if (v instanceof Vector) {\n      return this.x * v.y - this.y * v.x;\n    } else if (typeof v === 'number') {\n      return new Vector(v * this.y, -v * this.x);\n    }\n  }\n\n  static cross(num: number, vec: Vector): Vector {\n    return new Vector(-num * vec.y, num * vec.x);\n  }\n\n  /**\n   * Returns the perpendicular vector to this one\n   */\n  public perpendicular(): Vector {\n    return new Vector(this.y, -this.x);\n  }\n\n  /**\n   * Returns the normal vector to this one, same as the perpendicular of length 1\n   */\n  public normal(): Vector {\n    return this.perpendicular().normalize();\n  }\n\n  /**\n   * Negate the current vector\n   */\n  public negate(): Vector {\n    return this.scale(-1);\n  }\n\n  /**\n   * Returns the angle of this vector.\n   */\n  public toAngle(): number {\n    return Math.atan2(this.y, this.x);\n  }\n\n  /**\n   * Rotates the current vector around a point by a certain number of\n   * degrees in radians\n   */\n  public rotate(angle: number, anchor?: Vector): Vector {\n    if (!anchor) {\n      anchor = new Vector(0, 0);\n    }\n    const sinAngle = Math.sin(angle);\n    const cosAngle = Math.cos(angle);\n    const x = cosAngle * (this.x - anchor.x) - sinAngle * (this.y - anchor.y) + anchor.x;\n    const y = sinAngle * (this.x - anchor.x) + cosAngle * (this.y - anchor.y) + anchor.y;\n    return new Vector(x, y);\n  }\n\n  /**\n   * Creates new vector that has the same values as the previous.\n   */\n  public clone(dest?: Vector): Vector {\n    const v = dest ?? new Vector(0, 0);\n    v.x = this.x;\n    v.y = this.y;\n    return v;\n  }\n\n  /**\n   * Returns a string representation of the vector.\n   */\n  public toString(fixed?: number): string {\n    if (fixed) {\n      return `(${this.x.toFixed(fixed)}, ${this.y.toFixed(fixed)})`;\n    }\n    return `(${this.x}, ${this.y})`;\n  }\n}\n\n/**\n * Shorthand for creating new Vectors - returns a new Vector instance with the\n * provided X and Y components.\n * @param x  X component of the Vector\n * @param y  Y component of the Vector\n */\nexport function vec(x: number, y: number): Vector {\n  return new Vector(x, y);\n}\n","module.exports = new __parcel__URL__(\"sprite.7cf94011.png\").toString();","module.exports = new __parcel__URL__(\"obstacle.af1de7c7.png\").toString();"],"names":["$parcel$interopDefault","a","__esModule","default","MatrixLocations","$cafce761e2c8b5f4$export$9f9b2346169b00c0","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$18c11f3350a906ea$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$18c11f3350a906ea$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$4654a2d5137d0d5f$export$9b781de7bf37bf48","Zero","One","Half","Up","Down","Left","Right","fromAngle","angle","Math","cos","sin","isValid","vec","isNaN","x","y","Infinity","distance","vec1","vec2","sqrt","pow","min","max","constructor","_x","_y","val","setTo","equals","vector","tolerance","abs","deltaX","deltaY","squareDistance","size","newLength","normalize","scale","d","average","add","sizeOrScale","dest","result","sub","addEqual","subEqual","scaleEqual","dot","cross","num","perpendicular","normal","negate","toAngle","atan2","rotate","anchor","sinAngle","cosAngle","clone","fixed","toFixed","$4654a2d5137d0d5f$export$202e0172ed3c7be0","$cafce761e2c8b5f4$var$TwoPI","PI","$cafce761e2c8b5f4$export$c5552dfdbc7cec71","$cafce761e2c8b5f4$export$5b12bf1653c0dd85","ortho","left","right","bottom","top","near","far","mat","data","toDOMMatrix","DOMMatrix","fromFloat32Array","matrix","identity","reset","translation","sx","sy","rotation","angleRadians","multiply","vectorOrMatrix","resultX","resultY","a11","a21","a31","a41","a12","a22","a32","a42","a13","a23","a33","a43","a14","a24","a34","a44","b11","other","b21","b31","b41","b12","b22","b32","b42","b13","b23","b33","b43","b14","b24","b34","b44","s","getScale","_scaleSignX","_scaleSignY","translate","setPosition","getPosition","sine","cosine","setRotation","currentScale","getRotation","$cafce761e2c8b5f4$export$a4913eafbb02ceb4","tmpAngle","getScaleY","getScaleX","xscale","yscale","setScaleX","_scaleX","setScaleY","_scaleY","setScale","getBasisDeterminant","getAffineInverse","target","inverseDet","b","c","m","tx","ty","isIdentity","Float32Array","$989c04221556d5fb$exports","$878114f89552527b$exports","$543d6d2a56ed7d8d$var$gl","$543d6d2a56ed7d8d$var$canvas","document","querySelector","getContext","antialias","premultipliedAlpha","alpha","depth","powerPreference","$543d6d2a56ed7d8d$var$_processSourceForError","source","errorInfo","lines","split","errorLineStart","search","errorLineEnd","indexOf","_","error2","slice","map","Number","join","$543d6d2a56ed7d8d$var$ortho","canvas","width","height","viewport","clearColor","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","$543d6d2a56ed7d8d$var$glsl","$543d6d2a56ed7d8d$var$particleVertex","$543d6d2a56ed7d8d$var$particleFrag","$543d6d2a56ed7d8d$var$program","createProgram","$543d6d2a56ed7d8d$var$vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","$543d6d2a56ed7d8d$var$success","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","attachShader","$543d6d2a56ed7d8d$var$fragmentShader","FRAGMENT_SHADER","transformFeedbackVaryings","INTERLEAVED_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","console","log","useProgram","$543d6d2a56ed7d8d$var$TwoPI","$543d6d2a56ed7d8d$var$particleData","$543d6d2a56ed7d8d$var$numParticles","random","$543d6d2a56ed7d8d$var$vaos","$543d6d2a56ed7d8d$var$buffers","$543d6d2a56ed7d8d$var$particleDataBuffer1","createBuffer","$543d6d2a56ed7d8d$var$vao1","createVertexArray","bindVertexArray","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_COPY","bufferSubData","$543d6d2a56ed7d8d$var$offset","vertexAttribPointer","FLOAT","$543d6d2a56ed7d8d$var$numInputFloats","$543d6d2a56ed7d8d$var$bytesPerFloat","enableVertexAttribArray","push","$543d6d2a56ed7d8d$var$particleDataBuffer2","$543d6d2a56ed7d8d$var$vao2","$543d6d2a56ed7d8d$var$u_matrix","getUniformLocation","$543d6d2a56ed7d8d$var$u_random","$543d6d2a56ed7d8d$var$u_deltaMs","$543d6d2a56ed7d8d$var$u_gravity","$543d6d2a56ed7d8d$var$u_graphic","$543d6d2a56ed7d8d$var$u_obstacle","$543d6d2a56ed7d8d$var$spriteTex","createTexture","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","$543d6d2a56ed7d8d$var$sprite","Image","onload","activeTexture","TEXTURE0","texImage2D","RGBA","UNSIGNED_BYTE","src","$543d6d2a56ed7d8d$var$obstacleTex","$543d6d2a56ed7d8d$var$obstacle","$543d6d2a56ed7d8d$var$numDraw","$543d6d2a56ed7d8d$var$particleNumberDisplay","innerText","$543d6d2a56ed7d8d$var$particleSlider","value","addEventListener","evt","$543d6d2a56ed7d8d$var$index","$543d6d2a56ed7d8d$var$currentVao","$543d6d2a56ed7d8d$var$currentBuffer","$543d6d2a56ed7d8d$var$lastTime","$543d6d2a56ed7d8d$var$draw","timestamp","requestAnimationFrame","elapsedMs","uniformMatrix4fv","uniform1f","uniform2fv","uniform1i","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","performance","now"],"version":3,"file":"index.cace3297.js.map"}